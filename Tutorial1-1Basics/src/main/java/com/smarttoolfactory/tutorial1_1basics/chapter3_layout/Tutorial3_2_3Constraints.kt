package com.smarttoolfactory.tutorial1_1basics.chapter3_layout

import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.layout.widthIn
import androidx.compose.foundation.layout.wrapContentSize
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.Layout
import androidx.compose.ui.layout.Measurable
import androidx.compose.ui.layout.MeasureResult
import androidx.compose.ui.layout.MeasureScope
import androidx.compose.ui.platform.LocalDensity
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.Constraints
import androidx.compose.ui.unit.dp
import com.smarttoolfactory.tutorial1_1basics.ui.Blue400
import com.smarttoolfactory.tutorial1_1basics.ui.Green400
import com.smarttoolfactory.tutorial1_1basics.ui.Pink400
import com.smarttoolfactory.tutorial1_1basics.ui.components.StyleableTutorialText
import com.smarttoolfactory.tutorial1_1basics.ui.components.TutorialHeader
import com.smarttoolfactory.tutorial1_1basics.ui.components.TutorialText2
@Preview(showBackground = true)
@Composable
fun Tutorial3_2Screen3() {
    TutorialContent()
}

@Composable
private fun TutorialContent() {

    Column(
        modifier = Modifier
            .fillMaxWidth()
            // üî•üî• –í–∞–∂–Ω–æ: –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ —Å–∫—Ä–æ–ª–ª–∞ hasBoundedHeight
            // –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å Constraints.Infinity (–Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—É—é –≤—ã—Å–æ—Ç—É).
            .verticalScroll(rememberScrollState())
    ) {

        TutorialHeader(text = "Constraints")

        StyleableTutorialText(
            text = "Constraints (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è) –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç, –∫–∞–∫ –¥–æ—á–µ—Ä–Ω–∏–µ Composable –±—É–¥—É—Ç –∏–∑–º–µ—Ä–µ–Ω—ã. " +
                    "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é Constraints —É—á–∏—Ç—ã–≤–∞—é—Ç minWidth, maxWidth, minHeight, maxHeight " +
                    "–ª–µ–∏ÃÜ–∞—É—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö Modifier.\n" +
                    "–í –ø—Ä–∏–º–µ—Ä–∞—Ö –Ω–∏–∂–µ –º—ã –∏–∑–º–µ—Ä—è–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ Composable —Å Constraints —Å —Ä–∞–∑–Ω—ã–º–∏ " +
                    "–∑–Ω–∞—á–µ–Ω–∏—è–º–∏ minWidth –∏ maxWidth, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å, –∫–∞–∫ –æ–Ω–∏ –≤–ª–∏—è—é—Ç –Ω–∞ –∏–∑–º–µ—Ä–µ–Ω–∏–µ.\n" +
                    "–ó–µ–ª—ë–Ω–∞—è —Ä–∞–º–∫–∞ (border) –æ–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è, " +
                    "–∞ —à–∏—Ä–∏–Ω–∞ –ª–µ–π–∞—É—Ç–∞ –∑–∞–¥–∞—ë—Ç—Å—è –∫–∞–∫ **Constraints.maxWidth**. –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å " +
                    "—à–∏—Ä–∏–Ω—É –ª–µ–π–∞—É—Ç–∞, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –∫–∞–∫ –∏–∑–º–µ—Ä–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—è –º–µ–Ω—è–µ—Ç—Å—è " +
                    "–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —à–∏—Ä–∏–Ω—ã.",
            bullets = false
        )

        /*
            –õ–æ–≥–∏–∫–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è, –∫–æ–≥–¥–∞ –º—ã –∏–∑–º–µ—Ä—è–µ–º measurable, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Constraints
            —Å min, max –≥—Ä–∞–Ω–∏—Ü–∞–º–∏. –ï—Å–ª–∏ –º—ã –∏–∑–º–µ—Ä—è–µ–º —á—Ç–æ-—Ç–æ —Å —ç—Ç–∏–º–∏ –≥—Ä–∞–Ω–∏—Ü–∞–º–∏,
            –æ–Ω–æ —Ä–∞–∑–º–µ—â–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ.
         */

        DefaultConstraintsSample()
        CustomConstraintsSample()
        CustomConstraintsSample2()
        CustomConstraintsSample3()
        CustomConstraintsSample4()
    }
}

@Composable
private fun Content() {
    Text(
        "–ü–µ—Ä–≤—ã–π —Ç–µ–∫—Å—Ç",
        modifier = Modifier
            .background(Pink400),
        color = Color.White
    )
    Text(
        "–í—Ç–æ—Ä–æ–π —Ç–µ–∫—Å—Ç",
        modifier = Modifier
            .background(Blue400),
        color = Color.White
    )
}

@Composable
private fun DefaultConstraintsSample() {
    StyleableTutorialText(text = "1-) üçâ –°–æ–∑–¥–∞—ë–º CustomColumn —Å Default Constraints.")

    TutorialText2(text = "Modifier.fillMaxWidth()")
    // üî•üî•üî• –í –æ—Ç–ª–∏—á–∏–µ –æ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π Column, –∑–¥–µ—Å—å —É –∫–∞–∂–¥–æ–π –¥–æ—á–µ—Ä–Ω–µ–π View
    // —à–∏—Ä–∏–Ω–∞ –±—É–¥–µ—Ç maxWidth, –∫–æ–≥–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ fillMaxWidth(), –ø–æ—Ç–æ–º—É —á—Ç–æ
    // minWidth = maxWidth. –≠—Ç–æ –Ω–∞–≥–ª—è–¥–Ω–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç, –∫–∞–∫ Constraints –≤–ª–∏—è—é—Ç
    // –Ω–∞ —Ä–∞–∑–º–µ—Ä—ã —Ä–æ–¥–∏—Ç–µ–ª—è –∏ –¥–µ—Ç–µ–π.

    CustomColumnWithDefaultConstraints(
        modifier = Modifier
            .fillMaxWidth()
            .border(2.dp, Green400)
    ) { Content() }

    TutorialText2(text = "Modifier.width(200.dp)")
    // –ê–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π –ø—Ä–∏–º–µ—Ä, –∫–æ–≥–¥–∞ —è–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —à–∏—Ä–∏–Ω—ã 200.dp.

    CustomColumnWithDefaultConstraints(
        modifier = Modifier
            .width(200.dp)
            .border(2.dp, Green400)
    ) { Content() }

    TutorialText2(text = "Modifier.widthIn(min=200.dp)")
    CustomColumnWithDefaultConstraints(
        modifier = Modifier
            .widthIn(min = 200.dp)
            .border(2.dp, Green400)
    ) { Content() }

    TutorialText2(text = "Modifier.widthIn(max= 200.dp)")
    CustomColumnWithDefaultConstraints(
        modifier = Modifier
            .widthIn(max = 200.dp)
            .border(2.dp, Green400)
    ) { Content() }

    TutorialText2(text = "Modifier.wrapContentSize()")
    CustomColumnWithDefaultConstraints(
        modifier = Modifier
            .wrapContentSize()
            .border(2.dp, Green400)
    ) { Content() }
}

@Composable
private fun CustomConstraintsSample() {
    StyleableTutorialText(
        text = "2-) üéÉ –°–æ–∑–¥–∞—ë–º CustomColumn, –≥–¥–µ Constraints –ø—Ä–∏–≤–æ–¥—è—Ç—Å—è –∫ " +
                "**minWidth = constraints.maxWidth** –∏ **maxWidth = constraints.maxWidth**." +
                "\n–≠—Ç–æ –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑–º–µ—Ä—è—Ç—å—Å—è —Å—Ç—Ä–æ–≥–æ –Ω–∞ –≤—Å—é " +
                "–º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É Constraints."
    )

    TutorialText2(text = "Modifier.fillMaxWidth()")

    CustomColumnWithCustomConstraints(
        modifier = Modifier
            .fillMaxWidth()
            .border(2.dp, Green400)
    ) { Content() }

    TutorialText2(text = "Modifier.width(200.dp)")
    CustomColumnWithCustomConstraints(
        modifier = Modifier
            .width(200.dp)
            .border(2.dp, Green400)
    ) { Content() }

    TutorialText2(text = "Modifier.widthIn(min=200.dp)")
    CustomColumnWithCustomConstraints(
        modifier = Modifier
            .widthIn(min = 200.dp)
            .border(2.dp, Green400)
    ) { Content() }

    TutorialText2(text = "Modifier.widthIn(max= 200.dp)")
    CustomColumnWithCustomConstraints(
        modifier = Modifier
            .widthIn(max = 200.dp)
            .border(2.dp, Green400)
    ) { Content() }

    TutorialText2(text = "Modifier.wrapContentSize()")
    CustomColumnWithCustomConstraints(
        modifier = Modifier
            .wrapContentSize()
            .border(2.dp, Green400)
    ) { Content() }
}

@Composable
private fun CustomConstraintsSample2() {
    StyleableTutorialText(
        text = "3-) üçã –°–æ–∑–¥–∞—ë–º CustomColumn, –≤ –∫–æ—Ç–æ—Ä–æ–º Constraints " +
                "–∑–∞—Å—Ç–∞–≤–ª—è—é—Ç —à–∏—Ä–∏–Ω—É –±—ã—Ç—å —Ä–∞–≤–Ω–æ–π 250.dp (—á–µ—Ä–µ–∑ **Constraints.fixedWidth(250)**)."
    )

    TutorialText2(text = "Modifier.fillMaxWidth()")
    CustomColumnWithCustomConstraints2(
        modifier = Modifier
            .fillMaxWidth()
            .border(2.dp, Green400)
    ) { Content() }

    TutorialText2(text = "Modifier.width(200.dp)")
    CustomColumnWithCustomConstraints2(
        modifier = Modifier
            .width(200.dp)
            .border(2.dp, Green400)
    ) { Content() }

    TutorialText2(text = "Modifier.widthIn(min= 200.dp)")
    CustomColumnWithCustomConstraints2(
        modifier = Modifier
            .widthIn(min = 200.dp)
            .border(2.dp, Green400)
    ) { Content() }

    TutorialText2(text = "Modifier.widthIn(max= 200.dp)")
    CustomColumnWithCustomConstraints2(
        modifier = Modifier
            .widthIn(max = 200.dp)
            .border(2.dp, Green400)
    ) { Content() }

    TutorialText2(text = "Modifier.wrapContentSize()")
    CustomColumnWithCustomConstraints2(
        modifier = Modifier
            .wrapContentSize()
            .border(2.dp, Green400)
    ) { Content() }
}

@Composable
private fun CustomConstraintsSample3() {
    StyleableTutorialText(
        text = "4-) üçè –°–æ–∑–¥–∞—ë–º CustomColumn, –≥–¥–µ **minWidth = 0**."
    )

    TutorialText2(text = "Modifier.fillMaxWidth()")
    CustomColumnWithCustomConstraints3(
        modifier = Modifier
            .fillMaxWidth()
            .border(2.dp, Green400)
    ) { Content() }

    TutorialText2(text = "Modifier.width(200.dp)")
    CustomColumnWithCustomConstraints3(
        modifier = Modifier
            .width(200.dp)
            .border(2.dp, Green400)
    ) { Content() }

    TutorialText2(text = "Modifier.widthIn(min= 200.dp)")
    CustomColumnWithCustomConstraints3(
        modifier = Modifier
            .widthIn(min = 200.dp)
            .border(2.dp, Green400)
    ) { Content() }

    TutorialText2(text = "Modifier.widthIn(max= 200.dp)")
    CustomColumnWithCustomConstraints3(
        modifier = Modifier
            .widthIn(max = 200.dp)
            .border(2.dp, Green400)
    ) { Content() }

    TutorialText2(text = "Modifier.wrapContentSize()")
    CustomColumnWithCustomConstraints3(
        modifier = Modifier
            .wrapContentSize()
            .border(2.dp, Green400)
    ) { Content() }
}

@Composable
private fun CustomConstraintsSample4() {
    StyleableTutorialText(
        text = "5-) üåΩ –°–æ–∑–¥–∞—ë–º CustomColumn, –≤ –∫–æ—Ç–æ—Ä–æ–º **Constraints**: " +
                "** minWidth = 150.dp**, **maxWidth=250.dp**. " +
                "–î–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –±—É–¥—É—Ç –∏–º–µ—Ç—å —à–∏—Ä–∏–Ω—É –Ω–µ –º–µ–Ω—å—à–µ 150.dp, –Ω–æ –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—â—É—é 250.dp."
    )

    TutorialText2(text = "Modifier.fillMaxWidth()")
    CustomColumnWithCustomConstraints4(
        modifier = Modifier
            .fillMaxWidth()
            .border(2.dp, Green400)
    ) { Content() }

    TutorialText2(text = "Modifier.width(200.dp)")
    CustomColumnWithCustomConstraints4(
        modifier = Modifier
            .width(200.dp)
            .border(2.dp, Green400)
    ) { Content() }

    TutorialText2(text = "Modifier.widthIn(min= 200.dp)")
    CustomColumnWithCustomConstraints4(
        modifier = Modifier
            .widthIn(min = 200.dp)
            .border(2.dp, Green400)
    ) { Content() }

    TutorialText2(text = "Modifier.widthIn(max= 200.dp)")
    CustomColumnWithCustomConstraints4(
        modifier = Modifier
            .widthIn(max = 200.dp)
            .border(2.dp, Green400)
    ) { Content() }

    TutorialText2(text = "Modifier.wrapContentSize()")
    CustomColumnWithCustomConstraints4(
        modifier = Modifier
            .wrapContentSize()
            .border(2.dp, Green400)
    ) { Content() }
}

@Composable
private fun CustomColumnWithDefaultConstraints(
    modifier: Modifier,
    content: @Composable () -> Unit
) {
    Layout(
        modifier = modifier,
        content = content
    ) { measurables: List<Measurable>, constraints: Constraints ->
        println("üçâ CustomColumnWithDefaultConstraints() constraints: $constraints")
        createCustomColumnLayout(measurables, constraints, constraints)
    }
}

/**
 * –ò–∑–º–µ—Ä–µ–Ω–∏–µ —Å minWidth = constraints.maxWidth, –∏ maxWidth = constraints.maxWidth
 */
@Composable
private fun CustomColumnWithCustomConstraints(
    modifier: Modifier,
    content: @Composable () -> Unit
) {
    Layout(
        modifier = modifier,
        content = content
    ) { measurables: List<Measurable>, constraints: Constraints ->

        val updatedConstraints =
            constraints.copy(
                minWidth = constraints.maxWidth,
                maxWidth = constraints.maxWidth
            )

        println(
            "üéÉ CustomColumnWithCustomConstraints()\n" +
                    "constraints: $constraints\n" +
                    "updatedConstraints: $updatedConstraints"
        )

        createCustomColumnLayout(measurables, constraints, updatedConstraints)
    }
}

/**
 * –ò–∑–º–µ—Ä–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Constraints.fixedWidth(250.dp)
 */
@Composable
private fun CustomColumnWithCustomConstraints2(
    modifier: Modifier,
    content: @Composable () -> Unit
) {

    val density = LocalDensity.current
    val widthInPx = with(density) {
        250.dp.roundToPx()
    }
    Layout(
        modifier = modifier,
        content = content
    ) { measurables: List<Measurable>, constraints: Constraints ->

        val updatedConstraints = Constraints.fixedWidth(widthInPx)

        println(
            "üçã CustomColumnWithCustomConstraints2()\n" +
                    "constraints: $constraints\n" +
                    "updatedConstraints: $updatedConstraints"
        )
        createCustomColumnLayout(measurables, constraints, updatedConstraints)
    }
}

/**
 * –ò–∑–º–µ—Ä–µ–Ω–∏–µ —Å minWidth = 0
 */
@Composable
private fun CustomColumnWithCustomConstraints3(
    modifier: Modifier,
    content: @Composable () -> Unit
) {
    Layout(
        modifier = modifier,
        content = content
    ) { measurables: List<Measurable>, constraints: Constraints ->

        val updatedConstraints = constraints.copy(minWidth = 0)

        println(
            "üçè CustomColumnWithCustomConstraints3()\n" +
                    "constraints: $constraints\n" +
                    "updatedConstraints: $updatedConstraints"
        )
        createCustomColumnLayout(measurables, constraints, updatedConstraints)
    }
}

/**
 * –ò–∑–º–µ—Ä–µ–Ω–∏–µ —Å minWidth = 150.dp –∏ maxWidth = 250.dp
 */
@Composable
private fun CustomColumnWithCustomConstraints4(
    modifier: Modifier,
    content: @Composable () -> Unit
) {
    val density = LocalDensity.current

    val minWidthPx = with(density) {
        150.dp.roundToPx()
    }

    val maxWidthPx = with(density) {
        250.dp.roundToPx()
    }

    Layout(
        modifier = modifier,
        content = content
    ) { measurables: List<Measurable>, constraints: Constraints ->

        val updatedConstraints =
            constraints.copy(
                minWidth = minWidthPx,
                maxWidth = maxWidthPx
            )

        println(
            "üåΩ CustomColumnWithCustomConstraints4()\n" +
                    "constraints: $constraints\n" +
                    "updatedConstraints: $updatedConstraints"
        )
        createCustomColumnLayout(measurables, constraints, updatedConstraints)
    }
}

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ª–µ–π–∞—É—Ç–∞ —Ç–∏–ø–∞ Column,
 * —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –≤ –∫–∞–∂–¥–æ–º –ø—Ä–∏–º–µ—Ä–µ —Å —Ä–∞–∑–Ω—ã–º–∏ Constraints.
 */
private fun MeasureScope.createCustomColumnLayout(
    measurables: List<Measurable>,
    constraints: Constraints,
    updatedConstraints: Constraints
): MeasureResult {
    val placeables = measurables.map { measurable ->
        // –ò–∑–º–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –¥–æ—á–µ—Ä–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å —É—á—ë—Ç–æ–º updatedConstraints
        measurable.measure(updatedConstraints)
    }

    // –ü–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ –æ—Å–∏ Y, –¥–æ –∫–æ—Ç–æ—Ä–æ–≥–æ –º—ã —Ä–∞–∑–º–µ—â–∞–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã
    var yPosition = 0

    val totalHeight: Int = placeables.sumOf { it.height }

    // üî• –ú–æ–∂–Ω–æ –≤–∑—è—Ç—å –º–∞–∫—Å. —à–∏—Ä–∏–Ω—É –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ maxWidth –∏–∑ Constraints
//    val contentWidth: Int = placeables.maxOf { it.width }
//    val contentWidth: Int = placeables.sumOf { it.width }
    // üî• –í –¥–∞–Ω–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ –±–µ—Ä—ë–º width = constraints.maxWidth
    val contentWidth = constraints.maxWidth

    println("üî• CustomColumn Constraints ACTUAL WIDTH $contentWidth\n")
    println(
        "‚ö†Ô∏è ORIGINAL CONSTRAINTS: " +
                "minWidth ${constraints.minWidth}, " +
                "maxWidth: ${constraints.maxWidth}, " +
                "boundedWidth: ${constraints.hasBoundedWidth}, " +
                "fixedWidth: ${constraints.hasFixedWidth}\n" +
                "minHeight: ${constraints.minHeight}, " +
                "maxHeight: ${constraints.maxHeight}, " +
                "hasBoundedHeight: ${constraints.hasBoundedHeight}, " +
                "hasFixedHeight: ${constraints.hasFixedHeight}\n"
    )
    println(
        "‚ö†Ô∏è‚ö†Ô∏èÔ∏èÔ∏è Updated CONSTRAINTS: " +
                "minWidth ${updatedConstraints.minWidth}, " +
                "maxWidth: ${updatedConstraints.maxWidth}, " +
                "boundedWidth: ${updatedConstraints.hasBoundedWidth}, " +
                "fixedWidth: ${updatedConstraints.hasFixedWidth}\n" +
                "minHeight: ${updatedConstraints.minHeight}, " +
                "maxHeight: ${updatedConstraints.maxHeight}, " +
                "hasBoundedHeight: ${updatedConstraints.hasBoundedHeight}, " +
                "hasFixedHeight: ${updatedConstraints.hasFixedHeight}\n"
    )

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ª–µ–π–∞—É—Ç–∞ (—à–∏—Ä–∏–Ω—É) –≤ contentWidth, –∞ –≤—ã—Å–æ—Ç—É ‚Äî —Å—É–º–º–∞ –≤—ã—Å–æ—Ç children
    return layout(contentWidth, totalHeight) {
        // –†–∞–∑–º–µ—â–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ (–∫–∞–∫ –≤ Column)
        placeables.forEach { placeable ->
            placeable.placeRelative(x = 0, y = yPosition)
            yPosition += placeable.height
        }
    }
}
