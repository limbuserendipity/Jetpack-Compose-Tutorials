package com.smarttoolfactory.tutorial1_1basics.chapter3_layout

import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.BoxWithConstraints
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.shadow
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.Layout
import androidx.compose.ui.layout.Placeable
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import com.smarttoolfactory.tutorial1_1basics.ui.components.StyleableTutorialText
import com.smarttoolfactory.tutorial1_1basics.ui.components.TutorialHeader
import com.smarttoolfactory.tutorial1_1basics.ui.components.getRandomColor
@Preview(showBackground = true)
@Composable
fun Tutorial3_2Screen0() {
    TutorialContent()
}

@Composable
private fun TutorialContent() {
    Column(modifier = Modifier.fillMaxSize()) {

        TutorialHeader(text = "–û—Å–Ω–æ–≤—ã Layout")

        StyleableTutorialText(
            text = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ª–µ–π–∞—É—Ç —Å–æ–∑–¥–∞—ë—Ç—Å—è –ø—Ä–∏ –ø–æ–º–æ—â–∏ **Layout**. " +
                    "–î–ª—è –Ω–µ–≥–æ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç—Å—è **MeasurePolicy**, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç " +
                    "–ª–æ–≥–∏–∫—É –∏–∑–º–µ—Ä–µ–Ω–∏—è (measure) –∏ –ª–µ–π–∞—É—Ç–∞ (layout) Layout-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞.\n" +
                    "–ò–º–µ–Ω–Ω–æ —Å –ø–æ–º–æ—â—å—é Layout –∏ MeasurePolicy " +
                    "–ø–æ—Å—Ç—Ä–æ–µ–Ω—ã –±–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã Compose (—Ç–∞–∫–∏–µ, –∫–∞–∫ `Box`, `Column`, –∏ —Ç.–¥.), " +
                    "–∏ —Ç–∞–∫–∂–µ –∏—Ö –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–∏—Ö —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ª–µ–π–∞—É—Ç–æ–≤.\n\n" +
                    "–í–æ –≤—Ä–µ–º—è —Ñ–∞–∑—ã Layout –¥–µ—Ä–µ–≤–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Å –ø–æ–º–æ—â—å—é —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –∏–∑ 3 —à–∞–≥–æ–≤:\n" +
                    "\n" +
                    "1) –ò–∑–º–µ—Ä–∏—Ç—å –¥–µ—Ç–µ–π (Measure children): –µ—Å–ª–∏ —É —É–∑–ª–∞ –µ—Å—Ç—å –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –æ–Ω –∏—Ö –∏–∑–º–µ—Ä—è–µ—Ç.\n" +
                    "2) –†–µ—à–∏—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä (Decide own size): –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑–º–µ—Ä–µ–Ω–∏–π —É–∑–µ–ª –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–≤–æ–π —Ä–∞–∑–º–µ—Ä.\n" +
                    "3) –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –¥–µ—Ç–µ–π (Place children): –∫–∞–∂–¥—ã–π –¥–æ—á–µ—Ä–Ω–∏–π —É–∑–µ–ª —Ä–∞–∑–º–µ—â–∞–µ—Ç—Å—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∑–∏—Ü–∏–∏ —Å–∞–º–æ–≥–æ —É–∑–ª–∞.",
            bullets = false
        )

        CustomLayoutSample1()

        StyleableTutorialText(
            text = "–í —ç—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è Constraints, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –∏–∑–º–µ—Ä—è–µ—Ç—Å—è –∫–æ–Ω—Ç–µ–Ω—Ç. " +
                    "Composable, –≤—ã—Ö–æ–¥—è—â–∏–π –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã min=150.dp, max=300.dp, " +
                    "–∏–∑–º–µ—Ä—è–µ—Ç—Å—è –≤ —Ä–∞–º–∫–∞—Ö min –∏–ª–∏ max –∏–∑ —ç—Ç–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.",
            bullets = false
        )
        CustomLayoutSample2()
    }
}

@Preview(showBackground = true)
@Composable
private fun CustomLayoutSample1() {

    /*
        –í—ã–≤–æ–¥ –≤ –ª–æ–≥ (–ø—Ä–∏–º–µ—Ä–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ):
        üî•üî• Depth-First Tree Traversal

        // COMPOSITION Phase
        I  Parent Scope

        I  Child1 Scope
        I  Box Scope

        I  Child2 Outer Scope
        I  Child2 Inner Scope

        // LAYOUT MeasureScope
        I  üçè Child1 MeasureScope minWidth: 392.72726.dp, maxWidth: 392.72726.dp,
        minHeight: 50.18182.dp, maxHeight: 50.18182.dp
        I  contentHeight: 50.18182.dp, layoutHeight: 50.18182.dp

        I  üçè Child2 Inner MeasureScope minWidth: 0.0.dp, maxWidth: 392.72726.dp,
        minHeight: 0.0.dp, maxHeight: 750.1818.dp
        I  contentHeight: 18.90909.dp, layoutHeight: 18.90909.dp
        I  üçè Child2 Outer MeasureScope minWidth: 0.0.dp, maxWidth: 392.72726.dp,
        minHeight: 0.0.dp, maxHeight: 750.1818.dp
        I  contentHeight: 18.90909.dp, layoutHeight: 18.90909.dp

        I  üçè Parent MeasureScope minWidth: 392.72726.dp, maxWidth: 392.72726.dp,
        minHeight: 0.0.dp, maxHeight: 750.1818.dp
        I  contentHeight: 69.09091.dp, layoutHeight: 69.09091.dp

        // LAYOUT PlacementScope
        I  üçèüçè Parent PlacementScope
        I  üçèüçè Child1 PlacementScope
        I  üçèüçè Child2 Outer PlacementScope
        I  üçèüçè Child2 Inner PlacementScope
     */

    // label –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è, –Ω–µ —á–∞—Å—Ç—å —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ª–µ–π–∞—É—Ç–∞
    MyLayout(
        modifier = Modifier
            .shadow(4.dp, shape = RoundedCornerShape(8.dp))
            .background(getRandomColor())
            .fillMaxWidth(),
        label = "Parent"
    ) {
        println("Parent Scope")
        MyLayout(
            modifier = Modifier
                .shadow(4.dp, shape = RoundedCornerShape(8.dp))
                .background(getRandomColor())
                .fillMaxWidth()
                .size(50.dp),
            label = "Child1"
        ) {
            println("Child1 Scope")

            // –≠—Ç–æ—Ç Box –∏–∑–º–µ—Ä—è–µ—Ç—Å—è —Å min=50.dp, max=50.dp
            // –∏–∑-–∑–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π size(50.dp)
            Box(
                modifier = Modifier
                    .shadow(4.dp, shape = RoundedCornerShape(8.dp))
                    .background(getRandomColor())
                    .size(100.dp),
                contentAlignment = Alignment.CenterStart
            ) {
                println("Box Scope")
                Text(text = "Box Content", color = Color.White)
            }
        }

        MyLayout(
            modifier = Modifier
                .shadow(4.dp, shape = RoundedCornerShape(8.dp))
                .background(getRandomColor()),
            label = "Child2 Outer"
        ) {
            println("Child2 Outer Scope")

            MyLayout(
                modifier = Modifier
                    .shadow(4.dp, shape = RoundedCornerShape(8.dp))
                    .background(getRandomColor()),
                label = "Child2 Inner"
            ) {
                println("Child2 Inner Scope")
                Text("Child2 Bottom Content")
            }
        }
    }
}

@Preview(showBackground = true)
@Composable
private fun CustomLayoutSample2() {
    /*
        –í—ã–≤–æ–¥ –≤ –ª–æ–≥ (–ø—Ä–∏–º–µ—Ä–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ):
        I  CustomConstrainLayout Scope
        I  Top BoxWithConstraints Scope
        I  Middle BoxWithConstraints Scope
        I  Bottom BoxWithConstraints Scope
        I  üöó CustomConstrainLayout MeasureScope minWidth: 392.72726.dp, maxWidth: 392.72726.dp,
        minHeight: 750.1818.dp, maxHeight: 750.1818.dp
        I  contentHeight: 73.09091.dp, layoutHeight: 750.1818.dp
        I  üöóüöó CustomConstrainLayout PlacementScope
     */
    CustomConstrainLayout(
        modifier = Modifier.fillMaxSize()
    ) {
        println("CustomConstrainLayout Scope")
        BoxWithConstraints(
            modifier = Modifier
                .shadow(4.dp, shape = RoundedCornerShape(8.dp))
                .background(getRandomColor())
                .width(50.dp)
        ) {
            println("Top BoxWithConstraints Scope")
            Text(text = "min: $minWidth, max: $maxWidth")
        }
        BoxWithConstraints(
            modifier = Modifier
                .shadow(4.dp, shape = RoundedCornerShape(8.dp))
                .background(getRandomColor())
                .width(250.dp)
        ) {
            println("Middle BoxWithConstraints Scope")
            Text(text = "min: $minWidth, max: $maxWidth")
        }

        BoxWithConstraints(
            modifier = Modifier
                .shadow(4.dp, shape = RoundedCornerShape(8.dp))
                .background(getRandomColor())
                .width(350.dp)
        ) {
            println("Bottom BoxWithConstraints Scope")
            Text(text = "min: $minWidth, max: $maxWidth")
        }
    }
}

/**
 * –ü—Ä–∏–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ª–µ–π–∞—É—Ç–∞.
 * –í—ã–≤–æ–¥–∏—Ç –≤–ª–æ–∂–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, –∏–∑–º–µ—Ä—è—è –µ–≥–æ —Å Constraints, –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º
 * —Å—Ç–∞–≤–∏—Ç minWidth=0, minHeight=0, —á—Ç–æ–±—ã –∫–æ–Ω—Ç–µ–Ω—Ç –º–æ–≥ –∑–∞–Ω—è—Ç—å —Å–≤–æ–π "–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π" —Ä–∞–∑–º–µ—Ä.
 *
 * label –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ü–µ–ª–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
 */
@Composable
private fun MyLayout(
    modifier: Modifier = Modifier,
    label: String,
    content: @Composable () -> Unit
) {
    // –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ª–µ–π–∞—É—Ç –ø—Ä–∏ –ø–æ–º–æ—â–∏ Layout
    Layout(
        modifier = modifier,
        content = content
    ) { measurables, constraints ->

        /*
            –í–æ –≤—Ä–µ–º—è —Ñ–∞–∑—ã Layout –¥–µ—Ä–µ–≤–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Ç–∞–∫:

            1) –ò–∑–º–µ—Ä–µ–Ω–∏–µ –¥–µ—Ç–µ–π (Measure children): –µ—Å–ª–∏ —É —É–∑–ª–∞ –µ—Å—Ç—å –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –æ–Ω –∏—Ö –∏–∑–º–µ—Ä—è–µ—Ç.
            2) –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ (Decide own size): –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –∏–∑–º–µ—Ä–µ–Ω–∏–π —É–∑–µ–ª —Ä–µ—à–∞–µ—Ç, –∫–∞–∫–æ–π —É –Ω–µ–≥–æ –±—É–¥–µ—Ç —Ä–∞–∑–º–µ—Ä.
            3) –†–∞–∑–º–µ—â–µ–Ω–∏–µ –¥–µ—Ç–µ–π (Place children): –∫–∞–∂–¥—ã–π –¥–æ—á–µ—Ä–Ω–∏–π —É–∑–µ–ª —Ä–∞–∑–º–µ—â–∞–µ—Ç—Å—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∑–∏—Ü–∏–∏ —Å–∞–º–æ–≥–æ —É–∑–ª–∞.
         */

        // 1) –ò–∑–º–µ—Ä—è–µ–º Measurables (–≤–ª–æ–∂–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç) —Å —É—á—ë—Ç–æ–º Constraints
        val placeables = measurables.map { measurable ->
            measurable.measure(
                // –ò–∑–º–µ–Ω—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ Constraints –Ω–∞ 0
                constraints.copy(minWidth = 0, minHeight = 0)
            )
        }

        // 2) –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –Ω–∞—à–µ–≥–æ Layout
        // –î–æ–ø—É—Å—Ç–∏–º, –º—ã —Ö–æ—Ç–∏–º —Ä–∞—Å–ø–æ–ª–æ–∂–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∫–æ–ª–æ–Ω–∫—É, –≤—ã—Å–æ—Ç–∞ = —Å—É–º–º–∞ –≤—ã—Å–æ—Ç, —à–∏—Ä–∏–Ω–∞ = –º–∞–∫—Å. —à–∏—Ä–∏–Ω–∞
        val contentWidth = placeables.maxOf { it.width }
        val contentHeight = placeables.sumOf { it.height }

        // –ï—Å–ª–∏ –µ—Å—Ç—å Constraints —Ç–∏–ø–∞ fillMaxSize, –±–µ—Ä—ë–º –º–∞–∫—Å. –∑–Ω–∞—á–µ–Ω–∏—è
        val layoutWidth = if (constraints.hasBoundedWidth && constraints.hasFixedWidth) {
            constraints.maxWidth
        } else {
            contentWidth.coerceIn(constraints.minWidth, constraints.maxWidth)
        }

        val layoutHeight = if (constraints.hasBoundedHeight && constraints.hasFixedHeight) {
            constraints.maxHeight
        } else {
            contentHeight.coerceIn(constraints.minHeight, constraints.maxHeight)
        }

        println(
            "üçè $label MeasureScope " +
                    "minWidth: ${constraints.minWidth.toDp()}, " +
                    "maxWidth: ${constraints.maxWidth.toDp()}, " +
                    "minHeight: ${constraints.minHeight.toDp()}, " +
                    "maxHeight: ${constraints.maxHeight.toDp()}\n" +
                    "contentHeight: ${contentHeight.toDp()}, " +
                    "layoutHeight: ${layoutHeight.toDp()}\n"
        )

        // 3) Layout-–≥–∞–±–∞—Ä–∏—Ç—ã –¥–æ–ª–∂–Ω—ã –ø–æ–ø–∞–¥–∞—Ç—å –≤ Constraints
        layout(layoutWidth, layoutHeight) {

            // –†–∞–∑–º–µ—â–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ Placeable (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ –≤–∏–¥–µ –∫–æ–ª–æ–Ω–∫–∏)
            var y = 0

            println("üçèüçè $label PlacementScope")

            placeables.forEach { placeable: Placeable ->
                placeable.placeRelative(0, y)
                y += placeable.height
            }
        }
    }
}

/**
 * –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ª–µ–π–∞—É—Ç —Å —á–∞—Å—Ç–∏—á–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º–∏ Constraints:
 * minWidth=150.dp, maxWidth=300.dp,
 * –∫–æ–Ω—Ç–µ–Ω—Ç, –≤—ã—Ö–æ–¥—è—â–∏–π –∑–∞ —ç—Ç–∏ –≥—Ä–∞–Ω–∏—Ü—ã, –ø—Ä–∏–≤–æ–¥–∏—Ç—Å—è –∫ min/max.
 */
@Composable
private fun CustomConstrainLayout(
    modifier: Modifier = Modifier,
    content: @Composable () -> Unit
) {
    Layout(
        modifier = modifier,
        content = content
    ) { measurables, constraints ->

        val placeables = measurables.map { measurable ->
            measurable.measure(
                // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º Constraints –¥–ª—è –¥–æ—á–µ—Ä–Ω–∏—Ö Composables
                constraints.copy(
                    minWidth = 150.dp.roundToPx(),
                    maxWidth = 300.dp.roundToPx(),
                    minHeight = 0
                )
            )
        }

        val contentWidth = placeables.maxOf { it.width }
        val contentHeight = placeables.sumOf { it.height }

        val layoutWidth = if (constraints.hasBoundedWidth && constraints.hasFixedWidth) {
            constraints.maxWidth
        } else {
            contentWidth.coerceIn(constraints.minWidth, constraints.maxWidth)
        }

        val layoutHeight = if (constraints.hasBoundedHeight && constraints.hasFixedHeight) {
            constraints.maxHeight
        } else {
            contentHeight.coerceIn(constraints.minHeight, constraints.maxHeight)
        }

        println(
            "üöó CustomConstrainLayout MeasureScope " +
                    "minWidth: ${constraints.minWidth.toDp()}, " +
                    "maxWidth: ${constraints.maxWidth.toDp()}, " +
                    "minHeight: ${constraints.minHeight.toDp()}, " +
                    "maxHeight: ${constraints.maxHeight.toDp()}\n" +
                    "contentHeight: ${contentHeight.toDp()}, " +
                    "layoutHeight: ${layoutHeight.toDp()}\n"
        )

        layout(layoutWidth, layoutHeight) {

            var y = 0

            println("üöóüöó CustomConstrainLayout PlacementScope")

            placeables.forEach { placeable: Placeable ->
                placeable.placeRelative(0, y)
                y += placeable.height
            }
        }
    }
}
