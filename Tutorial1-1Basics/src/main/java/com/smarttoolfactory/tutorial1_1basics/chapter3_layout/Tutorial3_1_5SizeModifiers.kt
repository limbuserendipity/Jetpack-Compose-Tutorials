package com.smarttoolfactory.tutorial1_1basics.chapter3_layout

import androidx.compose.foundation.background
import androidx.compose.foundation.layout.BoxWithConstraints
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.defaultMinSize
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.heightIn
import androidx.compose.foundation.layout.requiredHeightIn
import androidx.compose.foundation.layout.requiredWidthIn
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.layout.widthIn
import androidx.compose.foundation.layout.wrapContentSize
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import com.smarttoolfactory.tutorial1_1basics.ui.Blue400
import com.smarttoolfactory.tutorial1_1basics.ui.Brown400
import com.smarttoolfactory.tutorial1_1basics.ui.Green400
import com.smarttoolfactory.tutorial1_1basics.ui.Orange400
import com.smarttoolfactory.tutorial1_1basics.ui.Pink400
import com.smarttoolfactory.tutorial1_1basics.ui.Purple400
import com.smarttoolfactory.tutorial1_1basics.ui.Red400
import com.smarttoolfactory.tutorial1_1basics.ui.components.StyleableTutorialText
import com.smarttoolfactory.tutorial1_1basics.ui.components.TutorialHeader
import com.smarttoolfactory.tutorial1_1basics.ui.components.TutorialText2

/*
    –ü–æ–¥—Ä–æ–±–Ω–µ–µ –ø–æ —Ç–µ–º–µ —Å–º. –ø–æ —Å—Å—ã–ª–∫–µ:
    https://stackoverflow.com/a/73316247/5457853
 */
@Preview(showBackground = true)
@Composable
fun Tutorial3_1Screen5() {
    TutorialContent()
}

@Composable
private fun TutorialContent() {

    Column(
        modifier = Modifier
            .fillMaxSize()
            .verticalScroll(rememberScrollState())
    ) {

        TutorialHeader(text = "Size Modifiers")

        StyleableTutorialText(
            text = "SizeModifiers –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –¥–∏–∞–ø–∞–∑–æ–Ω min-max –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π, " +
                    "—Å –∫–æ—Ç–æ—Ä—ã–º–∏ –∏–∑–º–µ—Ä—è—é—Ç—Å—è —ç—Ç–∏ Composable. " +
                    "–ü—Ä–∏ –∏–∑–º–µ—Ä–µ–Ω–∏–∏ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è —ç—Ç–æ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω min-max. " +
                    "–ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ min=100dp, max=200dp, —Ç–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ Composable " +
                    "–∏–∑–º–µ—Ä—è–µ—Ç—Å—è –º–µ–∂–¥—É 100dp –∏ 200dp.\n" +
                    "–î–æ–ø—É—Å—Ç–∏–º, –∫–æ–Ω—Ç–µ–Ω—Ç —Å —à–∏—Ä–∏–Ω–æ–π 30.dp –ø—Ä–∏ widthIn(min=100, max=200) " +
                    "–ø–æ–ª—É—á–∏—Ç —à–∏—Ä–∏–Ω—É 100.dp. –ò–∑-–∑–∞ —ç—Ç–æ–≥–æ –∏–Ω–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å " +
                    "–≥—Ä–∞–Ω–∏—Ü—ã (bounds) —Å min=0 –∏–ª–∏ max=—à–∏—Ä–∏–Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—è, " +
                    "–ª–∏–±–æ Constraints.Infinity.\n" +
                    "–í —ç—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ, –∫–∞–∫–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã " +
                    "–≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –∫–∞–∫–∏–µ Constraints, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, –∫–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç.",
            bullets = false
        )
        // üî• –ï—Å–ª–∏ –±—ã –Ω–µ –±—ã–ª–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ —Å–∫—Ä–æ–ª–ª–∞,
        // —Ç–æ maxHeight –º–æ–≥–ª–∞ –±—ã –±—ã—Ç—å Constraints.Infinity
        SizeModifierConstraintsSample()
        SizeInModifierSample()
        RequiredSizeModifierSample()
    }
}

@Preview(showBackground = true)
@Composable
private fun SizeModifierConstraintsSample() {
    Column(modifier = Modifier) {

        TutorialText2(text = "–ë–µ–∑ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ (No Dimension Modifier)")

        BoxWithConstraints(modifier = Modifier.background(Brown400)) {
            val hasBoundedWidth = constraints.hasBoundedWidth
            val hasFixedWidth = constraints.hasFixedWidth
            val minWidth = minWidth
            val maxWidth = maxWidth

            val hasBoundedHeight = constraints.hasBoundedHeight
            val hasFixedHeight = constraints.hasFixedHeight
            val minHeight = minHeight
            val maxHeight = maxHeight
            Text(
                "minWidth: $minWidth, maxWidth: $maxWidth\n" +
                        "hasBoundedWidth: $hasBoundedWidth, hasFixedWidth: $hasFixedWidth\n" +
                        "minHeight: $minHeight, maxHeight: $maxHeight\n" +
                        "hasBoundedHeight: $hasBoundedHeight, hasFixedHeight: $hasFixedHeight",
                color = Color.White
            )
        }

        Spacer(modifier = Modifier.height(10.dp))
        TutorialText2(text = "FillMaxWidth –∏ –≤—ã—Å–æ—Ç–∞ 200.dp")
        BoxWithConstraints(
            modifier = Modifier
                .fillMaxWidth()
                .height(200.dp)
                .background(Red400)
        ) {
            val hasBoundedWidth = constraints.hasBoundedWidth
            val hasFixedWidth = constraints.hasFixedWidth
            val minWidth = minWidth
            val maxWidth = maxWidth

            val hasBoundedHeight = constraints.hasBoundedHeight
            val hasFixedHeight = constraints.hasFixedHeight
            val minHeight = minHeight
            val maxHeight = maxHeight
            Text(
                "minWidth: $minWidth, maxWidth: $maxWidth\n" +
                        "hasBoundedWidth: $hasBoundedWidth, hasFixedWidth: $hasFixedWidth\n" +
                        "minHeight: $minHeight, maxHeight: $maxHeight\n" +
                        "hasBoundedHeight: $hasBoundedHeight, hasFixedHeight: $hasFixedHeight",
                color = Color.White
            )
        }

        Spacer(modifier = Modifier.height(10.dp))
        TutorialText2(text = "wrapContentSize()")
        BoxWithConstraints(
            modifier = Modifier
                .wrapContentSize()
                .background(Orange400)
        ) {

            val hasBoundedWidth = constraints.hasBoundedWidth
            val hasFixedWidth = constraints.hasFixedWidth
            val minWidth = minWidth
            val maxWidth = maxWidth

            val hasBoundedHeight = constraints.hasBoundedHeight
            val hasFixedHeight = constraints.hasFixedHeight
            val minHeight = minHeight
            val maxHeight = maxHeight
            Text(
                "minWidth: $minWidth, maxWidth: $maxWidth\n" +
                        "hasBoundedWidth: $hasBoundedWidth\n" +
                        "hasFixedWidth: $hasFixedWidth\n" +
                        "minHeight: $minHeight\n" +
                        "maxHeight: $maxHeight\n" +
                        "hasBoundedHeight: $hasBoundedHeight\n" +
                        "hasFixedHeight: $hasFixedHeight",
                color = Color.White
            )
        }

        Spacer(modifier = Modifier.height(10.dp))
        TutorialText2(text = "–®–∏—Ä–∏–Ω–∞ –∏ –≤—ã—Å–æ—Ç–∞ –ø–æ 200.dp")
        BoxWithConstraints(
            modifier = Modifier
                .width(200.dp)
                .height(200.dp)
                .background(Green400)
        ) {

            val hasBoundedWidth = constraints.hasBoundedWidth
            val hasFixedWidth = constraints.hasFixedWidth
            val minWidth = minWidth
            val maxWidth = maxWidth

            val hasBoundedHeight = constraints.hasBoundedHeight
            val hasFixedHeight = constraints.hasFixedHeight
            val minHeight = minHeight
            val maxHeight = maxHeight
            Text(
                "minWidth: $minWidth, maxWidth: $maxWidth\n" +
                        "hasBoundedWidth: $hasBoundedWidth, hasFixedWidth: $hasFixedWidth\n" +
                        "minHeight: $minHeight, maxHeight: $maxHeight\n" +
                        "hasBoundedHeight: $hasBoundedHeight, hasFixedHeight: $hasFixedHeight",
                color = Color.White
            )
        }
    }

}

@Preview(showBackground = true)
@Composable
private fun SizeInModifierSample() {
    TutorialText2(text = "widthIn(min=200.dp) –∏ heightIn(min=200.dp)")
    BoxWithConstraints(
        modifier = Modifier
            .widthIn(min = 200.dp)
            .heightIn(200.dp)
            .background(Blue400)
    ) {

        val hasBoundedWidth = constraints.hasBoundedWidth
        val hasFixedWidth = constraints.hasFixedWidth
        val minWidth = minWidth
        val maxWidth = maxWidth

        val hasBoundedHeight = constraints.hasBoundedHeight
        val hasFixedHeight = constraints.hasFixedHeight
        val minHeight = minHeight
        val maxHeight = maxHeight
        Text(
            "minWidth: $minWidth, maxWidth: $maxWidth\n" +
                    "hasBoundedWidth: $hasBoundedWidth, hasFixedWidth: $hasFixedWidth\n" +
                    "minHeight: $minHeight, maxHeight: $maxHeight\n" +
                    "hasBoundedHeight: $hasBoundedHeight, hasFixedHeight: $hasFixedHeight",
            color = Color.White
        )
    }
}

@Preview(showBackground = true)
@Composable
private fun RequiredSizeModifierSample() {
    Column {
        TutorialText2(text = "requiredWidthIn(min=200.dp) –∏ requiredHeightIn(min=200.dp)")
        BoxWithConstraints(
            modifier = Modifier
                .requiredWidthIn(min = 200.dp)
                .requiredHeightIn(200.dp)
                .background(Pink400)
        ) {

            val hasBoundedWidth = constraints.hasBoundedWidth
            val hasFixedWidth = constraints.hasFixedWidth
            val minWidth = minWidth
            val maxWidth = maxWidth

            val hasBoundedHeight = constraints.hasBoundedHeight
            val hasFixedHeight = constraints.hasFixedHeight
            val minHeight = minHeight
            val maxHeight = maxHeight
            Text(
                "minWidth: $minWidth, maxWidth: $maxWidth\n" +
                        "hasBoundedWidth: $hasBoundedWidth, hasFixedWidth: $hasFixedWidth\n" +
                        "minHeight: $minHeight, maxHeight: $maxHeight\n" +
                        "hasBoundedHeight: $hasBoundedHeight, hasFixedHeight: $hasFixedHeight",
                color = Color.White
            )
        }

        TutorialText2(text = "defaultMinSize(200.dp)")
        BoxWithConstraints(
            modifier = Modifier
                .defaultMinSize(200.dp)
                .background(Pink400)
        ) {

            val hasBoundedWidth = constraints.hasBoundedWidth
            val hasFixedWidth = constraints.hasFixedWidth
            val minWidth = minWidth
            val maxWidth = maxWidth

            val hasBoundedHeight = constraints.hasBoundedHeight
            val hasFixedHeight = constraints.hasFixedHeight
            val minHeight = minHeight
            val maxHeight = maxHeight
            Text(
                "minWidth: $minWidth, maxWidth: $maxWidth\n" +
                        "hasBoundedWidth: $hasBoundedWidth, hasFixedWidth: $hasFixedWidth\n" +
                        "minHeight: $minHeight, maxHeight: $maxHeight\n" +
                        "hasBoundedHeight: $hasBoundedHeight, hasFixedHeight: $hasFixedHeight",
                color = Color.White
            )
        }

        TutorialText2(text = "widthIn(max=200.dp)")
        BoxWithConstraints(
            modifier = Modifier
                .widthIn(max = 200.dp)
                .background(Purple400)
        ) {

            val hasBoundedWidth = constraints.hasBoundedWidth
            val hasFixedWidth = constraints.hasFixedWidth
            val minWidth = minWidth
            val maxWidth = maxWidth

            val hasBoundedHeight = constraints.hasBoundedHeight
            val hasFixedHeight = constraints.hasFixedHeight
            val minHeight = minHeight
            val maxHeight = maxHeight
            Text(
                "minWidth: $minWidth, maxWidth: $maxWidth\n" +
                        "hasBoundedWidth: $hasBoundedWidth, hasFixedWidth: $hasFixedWidth\n" +
                        "minHeight: $minHeight, maxHeight: $maxHeight\n" +
                        "hasBoundedHeight: $hasBoundedHeight, hasFixedHeight: $hasFixedHeight",
                color = Color.White
            )
        }
    }
}
