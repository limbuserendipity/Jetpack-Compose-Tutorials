package com.smarttoolfactory.tutorial1_1basics.chapter3_layout

import androidx.compose.foundation.*
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.ExperimentalMaterialApi
import androidx.compose.material.Surface
import androidx.compose.material.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.layout.Layout
import androidx.compose.ui.layout.Measurable
import androidx.compose.ui.layout.MeasurePolicy
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.Constraints
import androidx.compose.ui.unit.dp
import com.smarttoolfactory.tutorial1_1basics.R
import com.smarttoolfactory.tutorial1_1basics.ui.Pink400
import com.smarttoolfactory.tutorial1_1basics.ui.components.StyleableTutorialText
import com.smarttoolfactory.tutorial1_1basics.ui.components.TutorialHeader
import com.smarttoolfactory.tutorial1_1basics.ui.components.TutorialText2

/*
    –ü–æ–¥—Ä–æ–±–Ω–µ–µ –ø–æ —Ç–µ–º–µ —Å–º. –ø–æ —Å—Å—ã–ª–∫–µ:
    https://stackoverflow.com/a/73316247/5457853
 */
@Preview(showBackground = true)
@Composable
fun Tutorial3_1Screen7() {
    TutorialContent()
}

@Composable
private fun TutorialContent() {
    Column(
        modifier = Modifier
            .fillMaxSize()
            .verticalScroll(rememberScrollState())
            .padding(10.dp),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {

        TutorialHeader(text = "wrapContentSize Modifier")

        /**
         * Modifier.wrapContentSize –ø–æ–∑–≤–æ–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç—É –∏–∑–º–µ—Ä—è—Ç—å—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏
         * —Å –µ–≥–æ –∂–µ–ª–∞–µ–º—ã–º —Ä–∞–∑–º–µ—Ä–æ–º, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –≤—Ö–æ–¥—è—â–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
         * (Constraints.minWidth, Constraints.minHeight).
         * –ï—Å–ª–∏ [unbounded] = true, –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è —Ç–∞–∫–∂–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è.
         *
         * –ï—Å–ª–∏ –∏–∑–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ,
         * —Ç–æ [align] –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –≤–Ω—É—Ç—Ä–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞.
         * –ï—Å–ª–∏ –∏–∑–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ (–≤–æ–∑–º–æ–∂–µ–Ω –ø—Ä–∏ [unbounded] = true),
         * —Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç —Ç–æ–∂–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç—Å—è (align) –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞.
         */
        StyleableTutorialText(
            text = "1-) **Modifier.wrapContentSize** –º–æ–∂–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ " +
                    "–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è, –ø—Ä–∏—Ö–æ–¥—è—â–∏–µ –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è. " +
                    "–í –ø—Ä–∏–º–µ—Ä–µ **MinimumConstrainedLayout** –∑–∞–¥–∞—ë—Ç " +
                    "–º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É –∏ –≤—ã—Å–æ—Ç—É 500 –ø–∏–∫—Å–µ–ª–µ–π. –í–æ –≤—Ç–æ—Ä–æ–º –ø—Ä–∏–º–µ—Ä–µ " +
                    "**Modifier.wrapContentSize** –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –∏–∑–º–µ—Ä—è—Ç—å Composable, " +
                    "–∏—Å—Ö–æ–¥—è –∏–∑ —Ä–∞–∑–º–µ—Ä–∞ —Ä–µ–±—ë–Ω–∫–∞."
        )

        WrapContentSizeSample()

        StyleableTutorialText(
            text = "2-) **Surface** –Ω–∞–≤—è–∑—ã–≤–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ Constraints " +
                    "—Å–≤–æ–µ–º—É –ø—Ä—è–º–æ–º—É –ø–æ—Ç–æ–º–∫—É. –° –ø–æ–º–æ—â—å—é **Modifier.wrapContentSize** " +
                    "–º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –∂–µ–ª–∞–µ–º—ã–µ —Ä–∞–∑–º–µ—Ä—ã."
        )

        WrapWidthInsideSurfaceSample()

        StyleableTutorialText(
            text = "3-) **Modifier.wrapContentSize(unBounded = true)** –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç " +
                    "—É—á–∏—Ç—ã–≤–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ Constraints –ø–æ —Ä–∞–∑–º–µ—Ä—É –¥–æ—á–µ—Ä–Ω–µ–≥–æ Composable. " +
                    "–í–æ –≤—Ç–æ—Ä–æ–º –ø—Ä–∏–º–µ—Ä–µ **Image** –∏–∑–º–µ—Ä—è–µ—Ç—Å—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –º–∞–∫—Å. –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º."
        )

        // üî• Unbounded-–∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é –∏–ª–∏ —Ä–∞–∑–º–µ—Ä—ã —Ä–æ–¥–∏—Ç–µ–ª—è.
        // –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º—É –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Å–µ–¥–Ω–∏–µ Composable.
        // –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π Composable —Ä–∞–∑–º–µ—â–∞–µ—Ç—Å—è, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ —Å–≤–æ–∏—Ö Constraints, –∞ –Ω–µ –Ω–∞ unbounded –∫–æ–Ω—Ç–µ–Ω—Ç–µ.
        UnboundedWrapContentSample()

        StyleableTutorialText(
            text = "4-) **Modifier.wrapContentSize(unBounded = true)** –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, " +
                    "—á—Ç–æ–±—ã –æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ü–µ–ª–∏–∫–æ–º, –µ—Å–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—å –º–µ–Ω—å—à–µ " +
                    "—Å–∞–º–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∏ –ø—Ä–∏ —ç—Ç–æ–º –Ω–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å (–Ω–µ –ø–æ–¥–≥–æ–Ω—è—Ç—å) " +
                    "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥ —Ä–∞–∑–º–µ—Ä —Ä–æ–¥–∏—Ç–µ–ª—è."
        )

        UnBoundedWrapContentImageSample()
    }
}

@Composable
private fun WrapContentSizeSample() {

    TutorialText2(text = "–ë–µ–∑ wrap Modifier")

    MinimumConstrainedLayout(
        Modifier.border(2.dp, Color.Green)
    ) {
        Box(
            modifier = Modifier
                .size(50.dp)
                .background(Color.Red)
        ) {
            Box(modifier = Modifier.size(50.dp))
        }
    }

    Spacer(modifier = Modifier.width(20.dp))

    TutorialText2(text = "Modifier.wrapContentSize()")

    Row(
        modifier = Modifier.fillMaxWidth(),
        horizontalArrangement = Arrangement.SpaceEvenly
    ) {
        MinimumConstrainedLayout(
            Modifier.border(2.dp, Color.Green)
        ) {
            Box(
                modifier = Modifier
                    .wrapContentSize(align = Alignment.Center)
                    .background(Color.Red)
            ) {
                Box(modifier = Modifier.size(50.dp))
            }
        }

        MinimumConstrainedLayout(
            Modifier.border(2.dp, Color.Green)
        ) {
            Box(
                modifier = Modifier
                    .wrapContentSize(align = Alignment.BottomStart)
                    .background(Color.Red)
            ) {
                Box(modifier = Modifier.size(50.dp))
            }
        }

        MinimumConstrainedLayout(
            Modifier.border(2.dp, Color.Green)
        ) {
            Box(
                modifier = Modifier
                    .wrapContentSize(align = Alignment.BottomEnd)
                    .background(Color.Red)
            ) {
                Box(modifier = Modifier.size(50.dp))
            }
        }
    }
}

@OptIn(ExperimentalMaterialApi::class)
@Composable
private fun WrapWidthInsideSurfaceSample() {
    Row(
        modifier = Modifier.fillMaxWidth(),
        horizontalArrangement = Arrangement.SpaceEvenly
    ) {
        Surface(
            modifier = Modifier
                .size(100.dp)
                .border(2.dp, Color.Yellow),
            onClick = {}
        ) {
            Column(
                modifier = Modifier
                    .size(50.dp)
                    .background(Color.Red, RoundedCornerShape(6.dp))
            ) {
                Box(
                    modifier = Modifier
                        .size(50.dp)
                        .background(Color.Green, RoundedCornerShape(6.dp))
                )
            }
        }
        Surface(
            modifier = Modifier
                .size(100.dp)
                .border(2.dp, Color.Yellow),
            onClick = {}
        ) {
            Column(
                modifier = Modifier
                    .wrapContentWidth(Alignment.End)
                    .background(Color.Red, RoundedCornerShape(6.dp))
            ) {
                Box(
                    modifier = Modifier
                        .size(50.dp)
                        .background(Color.Green, RoundedCornerShape(6.dp))
                )
            }
        }

        Surface(
            modifier = Modifier
                .size(100.dp)
                .border(2.dp, Color.Yellow),
            onClick = {}
        ) {
            Column(
                modifier = Modifier
                    .wrapContentHeight(Alignment.Top)
                    .background(Color.Red, RoundedCornerShape(6.dp))
            ) {
                Box(
                    modifier = Modifier
                        .size(50.dp)
                        .background(Color.Green, RoundedCornerShape(6.dp))
                )
            }
        }
    }
}

@Composable
private fun UnboundedWrapContentSample() {
    TutorialText2(text = "Modifier.wrapContentSize(unbounded = false)")
    Box(
        modifier = Modifier
            .size(80.dp)
            .border(2.dp, Color.Green)
    ) {
        Column(
            modifier = Modifier
                .border(3.dp, Color.Red, RoundedCornerShape(8.dp))
                .wrapContentSize(unbounded = false)
                .background(Color.Cyan)
                .size(150.dp),
        ) {
            Text(
                text = "Hello world text",
                modifier = Modifier.background(Pink400),
                color = Color.White
            )
        }
    }

    TutorialText2(
        text = "Modifier\n" +
                ".wrapContentSize(unbounded = true)\n" +
                ".size(150.dp)"
    )
    Box(
        modifier = Modifier
            .size(80.dp)
            .border(2.dp, Color.Green)
    ) {
        Column(
            modifier = Modifier
                .border(3.dp, Color.Red, RoundedCornerShape(8.dp))
                .wrapContentSize(unbounded = true)
                .background(Color.Cyan)
                .size(150.dp),
        ) {
            BoxWithConstraints {
                Text(
                    text = "Constraints: $constraints",
                    modifier = Modifier.background(Pink400),
                    color = Color.White
                )
            }
        }
    }

    TutorialText2(
        text = "Modifier\n" +
                ".size(150.dp)\n" +
                ".wrapContentSize(unbounded = true)"
    )
    Box(
        modifier = Modifier
            .size(80.dp)
            .border(2.dp, Color.Green)
    ) {
        Column(
            modifier = Modifier
                .border(3.dp, Color.Red, RoundedCornerShape(8.dp))
                .size(150.dp)
                .background(Color.Cyan)
                .wrapContentSize(unbounded = true)
        ) {
            BoxWithConstraints {
                Text(
                    text = "Constraints: $constraints",
                    modifier = Modifier.background(Pink400),
                    color = Color.White
                )
            }
        }
    }
}

@Composable
private fun UnBoundedWrapContentImageSample() {

    TutorialText2(text = "Modifier.wrapContentSize(unbounded = false)")
    Box(
        modifier = Modifier
            .size(100.dp)
            .border(2.dp, Color.Green)
    ) {
        Image(
            modifier = Modifier
                .wrapContentSize(unbounded = false)
                .size(150.dp),
            painter = painterResource(id = R.drawable.landscape6),
            contentScale = ContentScale.FillBounds,
            contentDescription = null
        )
    }
    TutorialText2(
        text = "Modifier\n" +
                ".wrapContentSize(unbounded = true)\n" +
                ".size(250.dp)"
    )
    Box(
        modifier = Modifier
            .size(100.dp)
            .border(2.dp, Color.Green)
    ) {
        Image(
            modifier = Modifier
                .border(3.dp, Color.Red, RoundedCornerShape(8.dp))
                .wrapContentSize(unbounded = true)
                .border(2.dp, Color.Cyan)
                .size(250.dp),
            painter = painterResource(id = R.drawable.landscape6),
            contentDescription = null
        )
    }

    TutorialText2(
        text = "Modifier\n" +
                ".size(250.dp)\n" +
                ".wrapContentSize(unbounded = true)"
    )
    Box(
        modifier = Modifier
            .size(100.dp)
            .border(2.dp, Color.Green)
    ) {
        Image(
            modifier = Modifier
                .size(250.dp)
                .border(3.dp, Color.Red, RoundedCornerShape(8.dp))
                .wrapContentSize(unbounded = true)
                .border(2.dp, Color.Cyan),
            painter = painterResource(id = R.drawable.landscape6),
            contentDescription = null
        )
    }
}

@Composable
private fun MinimumConstrainedLayout(
    modifier: Modifier = Modifier,
    content: @Composable () -> Unit
) {
    val measurePolicy = MeasurePolicy { measurables, constraints ->
        val placeables = measurables.map { measurable: Measurable ->
            measurable.measure(
                constraints.copy(
                    minWidth = 300,
                    minHeight = 300
                )
            )
        }

        val hasBoundedWidth = constraints.hasBoundedWidth
        val hasFixedWidth = constraints.hasFixedWidth

        val width = if (hasBoundedWidth && hasFixedWidth) constraints.maxWidth
        else placeables.maxOf { it.width }.coerceIn(constraints.minWidth, constraints.maxWidth)

        val height = placeables.sumOf { it.height }

        var yPos = 0

        layout(width, height) {
            placeables.forEach {
                it.placeRelative(0, yPos)
                yPos += it.height
            }
        }
    }

    Layout(
        modifier = modifier,
        content = content,
        measurePolicy = measurePolicy
    )
}
