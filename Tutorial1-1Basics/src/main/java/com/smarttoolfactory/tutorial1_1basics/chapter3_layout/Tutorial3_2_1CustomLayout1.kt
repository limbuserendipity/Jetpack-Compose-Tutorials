package com.smarttoolfactory.tutorial1_1basics.chapter3_layout

import android.graphics.Point
import androidx.compose.foundation.BorderStroke
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.Card
import androidx.compose.material.MaterialTheme
import androidx.compose.material.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.Layout
import androidx.compose.ui.layout.Measurable
import androidx.compose.ui.layout.Placeable
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.Constraints
import androidx.compose.ui.unit.Dp
import androidx.compose.ui.unit.dp
import com.smarttoolfactory.tutorial1_1basics.ui.components.TutorialHeader
import kotlin.random.Random

@Preview(showBackground = true)
@Composable
fun Tutorial3_2Screen1() {
    TutorialContent()
}

@Composable
private fun TutorialContent() {
    Column(
        modifier = Modifier
            .border(3.dp, Color.Red)
            .fillMaxSize()
            .verticalScroll(rememberScrollState())
    ) {

        TutorialHeader(text = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ª–µ–π–∞—É—Ç—ã 1")

        ChipStaggeredGrid(
            modifier = Modifier
//                .fillMaxWidth()
                .width(250.dp)
                .border(3.dp, Color.Green)
        ) {
            for (topic in topics) {
                Chip(
                    modifier = Modifier
                        .border(3.dp, Color.Cyan)
                        .padding(8.dp),
                    text = topic
                )
            }
        }

        Spacer(modifier = Modifier.height(40.dp))
        ChipStaggeredGrid(
            modifier = Modifier
                .fillMaxWidth()
                .border(3.dp, Color.Green)
        ) {
            for (topic in topics) {
                Chip(
                    modifier = Modifier
                        .border(3.dp, Color.Cyan)
                        .padding(8.dp),
                    text = topic
                )
            }
        }
    }
}

@Composable
private fun CustomColumn(
    modifier: Modifier,
    content: @Composable () -> Unit,
) {
    Layout(
        modifier = modifier,
        content = content
    ) { measurables: List<Measurable>, constraints: Constraints ->

        // üî• –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º minWidth –≤ 0, —á—Ç–æ–±—ã —à–∏—Ä–∏–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–∞ —Ç–æ–ª—å–∫–æ —à–∏—Ä–∏–Ω–µ placeable.
        // –ò–Ω–∞—á–µ, –ø—Ä–∏ Modifier.fillMaxWidth/Size –∫–∞–∂–¥—ã–π Composable –ø–æ–ª—É—á–∏—Ç
        // minWidth = maxWidth.
        val looseConstraints = constraints.copy(minWidth = 0)

        val placeables = measurables.map { measurable ->
            // –ò–∑–º–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –¥–æ—á–µ—Ä–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
            measurable.measure(looseConstraints)
        }

        // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –ø–æ –æ—Å–∏ Y, –¥–æ –∫–æ—Ç–æ—Ä–æ–π –º—ã —Ä–∞—Å–ø–æ–ª–æ–∂–∏–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã
        var yPosition = 0

        val totalHeight: Int = placeables.sumOf {
            it.height
        }

        // –†–∞–∑–º–µ—Ä –ª–µ–π–∞—É—Ç–∞ –±—É–¥–µ—Ç –Ω–∞—Å—Ç–æ–ª—å–∫–æ –±–æ–ª—å—à–∏–º, –Ω–∞—Å–∫–æ–ª—å–∫–æ –æ–Ω –º–æ–∂–µ—Ç
        layout(constraints.maxWidth, totalHeight) {
            // –†–∞–∑–º–µ—â–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤–Ω—É—Ç—Ä–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –ª–µ–π–∞—É—Ç–∞
            placeables.forEach { placeable ->

                // –†–∞–∑–º–µ—â–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ —ç–∫—Ä–∞–Ω–µ
                placeable.placeRelative(x = 0, y = yPosition)

                // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É Y, –¥–æ –∫–æ—Ç–æ—Ä–æ–π –º—ã —Ä–∞—Å–ø–æ–ª–æ–∂–∏–ª–∏ —ç–ª–µ–º–µ–Ω—Ç
                yPosition += placeable.height
            }
        }
    }
}

@Composable
private fun Chip(modifier: Modifier = Modifier, text: String) {
    Card(
        modifier = modifier,
        border = BorderStroke(color = Color.Black, width = Dp.Hairline),
        shape = RoundedCornerShape(8.dp)
    ) {
        val size = Random.nextInt(10, 40)

        Row(
            modifier = Modifier.padding(start = 8.dp, top = 4.dp, end = 8.dp, bottom = 4.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            Box(
                modifier = Modifier
                    .size(size.dp)
                    .background(color = MaterialTheme.colors.secondary)
            )
            Spacer(Modifier.width(4.dp))
            Text(text = text)
        }
    }
}

/**
 * –≠—Ç–æ—Ç –ª–µ–π–∞—É—Ç —Å–æ–∑–¥–∞—ë—Ç "–∑–∞–≤–∏—Å–∏–º—É—é" (staggered) —Å–µ—Ç–∫—É, –≥–¥–µ –∫–∞–∂–¥–∞—è ¬´—Ñ–∏—à–∫–∞¬ª (Chip) –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
 * –æ—Å–Ω–æ–≤—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≤—ã—Å–æ—Ç–µ —Ñ–∏—à–∫–∏ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç—Ä–æ–∫–µ.
 */
@Composable
fun ChipStaggeredGrid(
    modifier: Modifier = Modifier,
    content: @Composable () -> Unit,
) {

    Layout(
        content = content,
        modifier = modifier
    ) { measurables: List<Measurable>, constraints: Constraints ->

        val constraintMaxWidth = constraints.maxWidth

        var maxRowWidth = 0

        var currentWidthOfRow = 0
        var totalHeightOfRows = 0

        var xPos: Int
        var yPos: Int

        val placeableMap = linkedMapOf<Int, Point>()
        val rowHeights = mutableListOf<Int>()

        var maxPlaceableHeight = 0
        var lastRowHeight = 0

        val placeables: List<Placeable> = measurables.mapIndexed { index, measurable ->

            // –ò–∑–º–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –¥–æ—á–µ—Ä–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
            val placeable =
                measurable.measure(
                    constraints.copy(
                        minWidth = 0,
                        minHeight = 0,
//                        maxWidth = Constraints.Infinity
                    )
                )

            val placeableWidth = placeable.width
            val placeableHeight = placeable.height

            // –ë—É–¥–µ–º –ª–∏ –º—ã –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ç—É –∂–µ —Å—Ç—Ä–æ–∫—É?
            // –ï—Å–ª–∏ —Å—É–º–º–∞ —Ç–µ–∫—É—â–µ–π —à–∏—Ä–∏–Ω—ã —Å—Ç—Ä–æ–∫–∏ –∏ —à–∏—Ä–∏–Ω—ã —ç—Ç–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            // –º–µ–Ω—å—à–µ —á–µ–º constraintMaxWidth (—Ç–æ –µ—Å—Ç—å –≤–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤ —à–∏—Ä–∏–Ω—É –ª–µ–π–∞—É—Ç–∞)
            val isSameRow = (currentWidthOfRow + placeableWidth <= constraintMaxWidth)

            if (isSameRow) {
                xPos = currentWidthOfRow
                yPos = totalHeightOfRows

                // –¢–µ–ø–µ—Ä—å —à–∏—Ä–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏ ‚Äî —ç—Ç–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –¥–ª–∏–Ω–∞ –ø–ª—é—Å —à–∏—Ä–∏–Ω–∞ –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                currentWidthOfRow += placeableWidth

                // –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Å—Ç—Ä–æ–∫–µ
                maxPlaceableHeight = maxPlaceableHeight.coerceAtLeast(placeableHeight)

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–∞–º–∞—è –ª–∏ —ç—Ç–æ –¥–ª–∏–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
                maxRowWidth = maxRowWidth.coerceAtLeast(currentWidthOfRow)

                lastRowHeight = maxPlaceableHeight

            } else {
                // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
                currentWidthOfRow = placeableWidth
                maxPlaceableHeight = maxPlaceableHeight.coerceAtLeast(placeableHeight)

                // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã—Å–æ—Ç—É –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç—Ä–æ–∫–∏ –∫ –æ–±—â–µ–π –≤—ã—Å–æ—Ç–µ
                totalHeightOfRows += maxPlaceableHeight

                xPos = 0
                yPos = totalHeightOfRows

                rowHeights.add(maxPlaceableHeight)

                lastRowHeight = maxPlaceableHeight
                maxPlaceableHeight = placeableHeight
            }

            placeableMap[index] = Point(xPos, yPos)
            placeable
        }

        // –í—ã—Å–æ—Ç–∞ –ª–µ–π–∞—É—Ç–∞ –±—É–¥–µ—Ç —Å—É–º–º–æ–π –≤—ã—Å–æ—Ç—ã –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ –ø–ª—é—Å –≤—ã—Å–æ—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–∏
        val finalHeight = (rowHeights.sumOf { it } + lastRowHeight)
            .coerceIn(constraints.minHeight.rangeTo(constraints.maxHeight))

        // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –∏–ª–∏ –º–µ–Ω—å—à–µ, —á–µ–º maxWidth,
        // –ø–æ—ç—Ç–æ–º—É –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —à–∏—Ä–∏–Ω—É –≤ min..max
        if (constraints.hasFixedWidth && constraints.hasBoundedWidth) {
            maxRowWidth =
                maxRowWidth.coerceIn(
                    minimumValue = constraints.minWidth,
                    maximumValue = constraints.maxWidth
                )
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ª–µ–π–∞—É—Ç–∞
        layout(maxRowWidth, finalHeight) {
            // –†–∞–∑–º–µ—â–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤–Ω—É—Ç—Ä–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –ª–µ–π–∞—É—Ç–∞
            placeables.forEachIndexed { index, placeable ->
                val point = placeableMap[index]
                point?.let {
                    placeable.placeRelative(x = point.x, y = point.y)
                }
            }
        }
    }
}

// –°–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ç–µ–º (—Å–ª–æ–≤–∞)
private val topics = listOf(
    "Arts & Crafts", "Beauty", "Books", "Business", "Comics", "Culinary",
    "Design", "Fashion", "Film", "History", "Maths", "Music", "People", "Philosophy",
    "Religion", "Social sciences", "Technology", "TV", "Writing"
)
