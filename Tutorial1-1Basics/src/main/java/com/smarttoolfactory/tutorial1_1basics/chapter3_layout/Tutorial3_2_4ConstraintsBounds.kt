package com.smarttoolfactory.tutorial1_1basics.chapter3_layout

import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.BoxWithConstraints
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxHeight
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.layout.widthIn
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.Slider
import androidx.compose.material.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableFloatStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.shadow
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.Layout
import androidx.compose.ui.layout.Measurable
import androidx.compose.ui.layout.Placeable
import androidx.compose.ui.platform.LocalDensity
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.Constraints
import androidx.compose.ui.unit.dp
import com.smarttoolfactory.tutorial1_1basics.ui.Blue400
import com.smarttoolfactory.tutorial1_1basics.ui.Green400
import com.smarttoolfactory.tutorial1_1basics.ui.Orange400
import com.smarttoolfactory.tutorial1_1basics.ui.Pink400
import com.smarttoolfactory.tutorial1_1basics.ui.components.StyleableTutorialText
import com.smarttoolfactory.tutorial1_1basics.ui.components.TutorialHeader
import com.smarttoolfactory.tutorial1_1basics.ui.components.TutorialText2
@Preview(showBackground = true)
@Composable
fun Tutorial3_2Screen4() {
    TutorialContent()
}

@Composable
private fun TutorialContent() {

    Column(
        modifier = Modifier
            .fillMaxWidth()
            // üî• –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ —Å–∫—Ä–æ–ª–ª–∞
            // hasBoundedHeight –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å Constraints.Infinity.
            .verticalScroll(rememberScrollState()),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        TutorialHeader(text = "–ì—Ä–∞–Ω–∏—Ü—ã (Bounds) Constraints")
        ConstraintsSample()
    }
}

@Composable
private fun ConstraintsSample() {

    val density = LocalDensity.current
    val containerWidth = with(density) {
        700f.toDp()
    }

    Column(
        modifier = Modifier
            .width(containerWidth)
            .background(Color(0xffFBE9E7))
            .fillMaxHeight()
    ) {

        StyleableTutorialText(
            text = "–ö–æ–≥–¥–∞ —à–∏—Ä–∏–Ω–∞ –ª–µ–π–∞—É—Ç–∞ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ —Ä–∞–º–∫–∏ " +
                    "**Constraints.minWidth**..**Constraints.maxWidth**, " +
                    "—Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –ª–µ–π–∞—É—Ç –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ –ø–æ–∑–∏—Ü–∏—é " +
                    "(Constraints.maxWidth - —à–∏—Ä–∏–Ω–∞ –ª–µ–π–∞—É—Ç–∞)/2 –∏–ª–∏ " +
                    "(Constraints.minWidth - —à–∏—Ä–∏–Ω–∞ –ª–µ–π–∞—É—Ç–∞)/2.\n" +
                    "Constraints, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤, " +
                    "–æ–ø—Ä–µ–¥–µ–ª—è—é—Ç –∏—Ö —Ä–∞–∑–º–µ—Ä. \n" +
                    "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —à–∏—Ä–∏–Ω—ã –ª–µ–π–∞—É—Ç–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –≥–¥–µ —Ä–æ–¥–∏—Ç–µ–ª—å –±—É–¥–µ—Ç –ø–æ–º–µ—â—ë–Ω " +
                    "–∏ –∫–∞–∫–æ–π —É—á–∞—Å—Ç–æ–∫ –æ–Ω –∑–∞–π–º—ë—Ç. –í –ø—Ä–∏–º–µ—Ä–µ –≤—ã–±—Ä–∞–Ω–∞ —à–∏—Ä–∏–Ω–∞ " +
                    "containerWidth = 700px.",
            bullets = false
        )

        StyleableTutorialText(
            text = "1) –í —ç—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ –¥–æ—á–µ—Ä–Ω–∏–µ Composable –∏–∑–º–µ—Ä—è—é—Ç—Å—è —Å **constraints**, " +
                    "–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–∏–º–∏ maxWidth = **containerWidth=700**."
        )
        MyLayout(
            modifier = Modifier.border(3.dp, Green400)
        ) { Content() }

        Spacer(modifier = Modifier.height(10.dp))

        StyleableTutorialText(
            text = "2) –í —ç—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ –¥–æ—á–µ—Ä–Ω–∏–µ Composable –∏–∑–º–µ—Ä—è—é—Ç—Å—è —Å " +
                    "**constraints.copy(minWidth = 750, maxWidth = 900)**.\n" +
                    "–ò–∑-–∑–∞ —Ç–æ–≥–æ, —á—Ç–æ —É –¥–æ—á–µ—Ä–Ω–∏—Ö Composable —à–∏—Ä–∏–Ω–∞ –±–æ–ª—å—à–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞, –æ–Ω–∏ " +
                    "–≤—ã—Ö–æ–¥—è—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ Composable."
        )

        MyLayout2(
            modifier = Modifier.border(3.dp, Green400)
        ) { Content() }

        Spacer(modifier = Modifier.height(10.dp))

        StyleableTutorialText(
            text = "3) –í —ç—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ MyLayout3 (–∑–µ–ª—ë–Ω–∞—è —Ä–∞–º–∫–∞) " +
                    "–≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã —Ä–æ–¥–∏—Ç–µ–ª—è, —Ç–∞–∫ –∫–∞–∫ **Constraints.maxWidth = 700**, " +
                    "–∞ —à–∏—Ä–∏–Ω–∞ –ª–µ–π–∞—É—Ç–∞ = 900px. –≠–ª–µ–º–µ–Ω—Ç —Å–º–µ—â–∞–µ—Ç—Å—è –Ω–∞ -100px –≤–ª–µ–≤–æ " +
                    "( (700 - 900) / 2 )."
        )

        MyLayout3(modifier = Modifier.border(3.dp, Green400)) {
            Content()
        }

        val minWidth = with(density) {
            600f.toDp()
        }

        StyleableTutorialText(
            text = "4) –í —ç—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ —à–∏—Ä–∏–Ω–∞ –ª–µ–π–∞—É—Ç–∞ = 400px, " +
                    "–∞ **Constraints.minWidth = 600px** –∏ **Constraints.maxWidth = 700px**. " +
                    "MyLayout4(–∑–µ–ª—ë–Ω–∞—è —Ä–∞–º–∫–∞) —Ä–∞–∑–º–µ—â–∞–µ—Ç—Å—è –Ω–∞ " +
                    "**(Constraints.minWidth - —à–∏—Ä–∏–Ω–∞ –ª–µ–π–∞—É—Ç–∞)/2**.\n" +
                    "–¢–∞–∫–∂–µ –¥–æ—á–µ—Ä–Ω–∏–π Composable –∏–∑–º–µ—Ä—è–µ—Ç—Å—è —Å " +
                    "**constraints.copy(minWidth = 100, maxWidth = 500)**."
        )

        // üî• –†–∞–∑–º–µ—â–∞–µ—Ç—Å—è –Ω–∞ ((600f - 400f)/2) = 100px –æ—Ç –ª–µ–≤–æ–≥–æ –∫—Ä–∞—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ Composable
        MyLayout4(
            modifier = Modifier
                .widthIn(min = minWidth)
                .border(3.dp, Green400)
        ) {
            BoxWithConstraints {
                Text(
                    text = "Constraints: $constraints",
                    color = Color.White,
                    modifier = Modifier
                        .shadow(2.dp, RoundedCornerShape(8.dp))
                        .background(Pink400)
                )
            }
        }

        StyleableTutorialText(
            text = "5) –í —ç—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è/–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ (–≤ px), " +
                    "–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è/–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ constraints (–≤ px) " +
                    "–∏ —à–∏—Ä–∏–Ω–∞ –ª–µ–π–∞—É—Ç–∞ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è —Å–ª–∞–π–¥–µ—Ä–∞–º–∏, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ " +
                    "–Ω–∞–±–ª—é–¥–∞—Ç—å, –∫–∞–∫ –¥–æ—á–µ—Ä–Ω–∏–µ –∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ Composable —Ä–∞–∑–º–µ—â–∞—é—Ç—Å—è."
        )

        ConstraintsOffsetAndBoundsSample()
    }
}

@Composable
private fun ConstraintsOffsetAndBoundsSample() {

    var minWidth by remember { mutableFloatStateOf(100f) }
    var maxWidth by remember { mutableFloatStateOf(700f) }
    var constraintsMinWidth by remember { mutableFloatStateOf(100f) }
    var constraintsMaxWidth by remember { mutableFloatStateOf(700f) }
    var layoutWidth by remember { mutableFloatStateOf(700f) }

    LayoutWithWidthParams(
        minWidth = minWidth.toInt(),
        maxWidth = maxWidth.toInt(),
        constraintsMinWidth = constraintsMinWidth.toInt(),
        constraintsMaxWidth = constraintsMaxWidth.toInt(),
        layoutWidth = layoutWidth.toInt()
    ) {
        BoxWithConstraints {
            Text(
                text = "Constraints: $constraints",
                color = Color.White,
                modifier = Modifier
                    .shadow(2.dp, RoundedCornerShape(8.dp))
                    .background(Orange400)
            )
        }
    }

    TutorialText2(
        text = "minWidth –∏ maxWidth –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞, " +
                "–∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–µ Constraints –±–µ—Ä—É—Ç—Å—è –∏–∑ —ç—Ç–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π"
    )

    SliderWithLabel(
        label = "MinWidth: ${minWidth.toInt()}",
        value = minWidth
    ) {
        if (it <= maxWidth) {
            minWidth = it
        }
    }

    SliderWithLabel(
        label = "MaxWidth: ${maxWidth.toInt()}",
        value = maxWidth
    ) {
        if (it >= minWidth) {
            maxWidth = it
        }
    }

    TutorialText2(
        text = "–®–∏—Ä–∏–Ω–∞ –ª–µ–π–∞—É—Ç–∞ (parent Composable). –ï—Å–ª–∏ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ —Ä–∞–º–∫–∏ " +
                "(minWidth..maxWidth), —ç–ª–µ–º–µ–Ω—Ç —Å–º–µ—â–∞–µ—Ç—Å—è.\n" +
                "–û—Ç —Ç–æ–≥–æ, –∫–∞–∫–∞—è —à–∏—Ä–∏–Ω–∞ –≤—ã–±—Ä–∞–Ω–∞, –∑–∞–≤–∏—Å–∏—Ç –ø–æ–∑–∏—Ü–∏—è –∏ –ø–æ–∫—Ä—ã—Ç–∏–µ –ª–µ–π–∞—É—Ç–∞."
    )

    SliderWithLabel(
        label = "Layout Width: ${layoutWidth.toInt()}",
        value = layoutWidth
    ) {
        layoutWidth = it
    }

    TutorialText2(text = "–î–æ—á–µ—Ä–Ω–∏–π Composable –∏–∑–º–µ—Ä—è–µ—Ç—Å—è –ø–æ –∑–Ω–∞—á–µ–Ω–∏—è–º (constraintsMinWidth, constraintsMaxWidth)")

    SliderWithLabel(
        label = "Child Constraints MinWidth: ${constraintsMinWidth.toInt()}",
        value = constraintsMinWidth
    ) {
        if (it <= constraintsMaxWidth) {
            constraintsMinWidth = it
        }
    }

    SliderWithLabel(
        label = "Child Constraints MaxWidth: ${constraintsMaxWidth.toInt()}",
        value = constraintsMaxWidth
    ) {
        if (it >= constraintsMinWidth) {
            constraintsMaxWidth = it
        }
    }
}

@Composable
internal fun SliderWithLabel(label: String, value: Float, onValueChange: (Float) -> Unit) {
    Column {
        Text(label)
        Slider(
            value = value,
            onValueChange = onValueChange,
            valueRange = 0f..1000f
        )
    }
}

@Composable
private fun Content() {

    val density = LocalDensity.current

    val child1Width = with(density) {
        800.toDp()
    }

    val child2Width = with(density) {
        600.toDp()
    }

    BoxWithConstraints(
        modifier = Modifier
            .shadow(2.dp, RoundedCornerShape(8.dp))
            .width(child1Width)
            .background(Pink400)
            .clickable {}
    ) {
        Text("constraints1: $constraints", color = Color.White)
    }

    BoxWithConstraints(
        modifier = Modifier
            .shadow(2.dp, RoundedCornerShape(8.dp))
            .width(child2Width)
            .background(Blue400)
            .clickable {}
    ) {
        Text("constraints2: $constraints", color = Color.White)
    }
}

@Composable
private fun MyLayout(
    modifier: Modifier = Modifier,
    content: @Composable () -> Unit
) {

    Layout(
        modifier = modifier,
        content = content
    ) { measurables: List<Measurable>, constraints: Constraints ->

        val placeables = measurables.map { measurable: Measurable ->
            measurable.measure(constraints)
        }

        val totalHeight = placeables.sumOf { it.height }

        var posY = 0
        layout(constraints.maxWidth, totalHeight) {
            placeables.forEach { placeable: Placeable ->
                placeable.placeRelative(0, posY)
                posY += placeable.height
            }
        }
    }
}

@Composable
private fun MyLayout2(
    modifier: Modifier = Modifier,
    content: @Composable () -> Unit
) {

    Layout(
        modifier = modifier,
        content = content
    ) { measurables: List<Measurable>, constraints: Constraints ->

        // –ò–∑–º–µ—Ä—è–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã Constraints, –∫–æ—Ç–æ—Ä—ã–µ –±–æ–ª—å—à–µ, —á–µ–º —É —Ä–æ–¥–∏—Ç–µ–ª—è.
        val updatedConstraints = constraints.copy(minWidth = 750, maxWidth = 900)

        val placeables = measurables.map { measurable: Measurable ->
            measurable.measure(updatedConstraints)
        }

        println(
            "üî• MyLayout2\n" +
                    "constraints: $constraints\n" +
                    "updatedConstraints: $updatedConstraints\n"
        )

        val totalHeight = placeables.sumOf { it.height }

        var posY = 0

        layout(constraints.maxWidth, totalHeight) {
            placeables.forEach { placeable: Placeable ->
                placeable.placeRelative(0, posY)
                posY += placeable.height
            }
        }
    }
}

@Composable
private fun MyLayout3(
    modifier: Modifier = Modifier,
    content: @Composable () -> Unit
) {

    Layout(
        modifier = modifier,
        content = content
    ) { measurables: List<Measurable>, constraints: Constraints ->

        val placeables = measurables.map { measurable: Measurable ->
            measurable.measure(constraints)
        }

        println(
            "üî• MyLayout3\n" +
                    "constraints: $constraints"
        )

        val totalHeight = placeables.sumOf { it.height }

        var posY = 0

        // üî•üî• –ú–µ–Ω—è–µ–º —à–∏—Ä–∏–Ω—É –Ω–∞ 900, —á—Ç–æ –±–æ–ª—å—à–µ, —á–µ–º constraints.maxWidth=700.
        // –ò–∑-–∑–∞ —ç—Ç–æ–≥–æ –ª–µ–π–∞—É—Ç –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã —Ä–æ–¥–∏—Ç–µ–ª—è.
        layout(width = 900, height = totalHeight) {
            placeables.forEach { placeable: Placeable ->
                placeable.placeRelative(0, posY)
                posY += placeable.height
            }
        }
    }
}

@Composable
private fun MyLayout4(
    modifier: Modifier = Modifier,
    content: @Composable () -> Unit
) {

    Layout(
        modifier = modifier,
        content = content
    ) { measurables: List<Measurable>, constraints: Constraints ->

        val updatedConstraints = constraints.copy(minWidth = 100, maxWidth = 500)

        val placeables = measurables.map { measurable: Measurable ->
            measurable.measure(updatedConstraints)
        }

        println(
            "üî• MyLayout4\n" +
                    "constraints: $constraints\n" +
                    "updatedConstraints: $updatedConstraints\n"
        )

        val totalHeight = placeables.sumOf { it.height }

        var posY = 0

        // üî•üî• –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –ª–µ–π–∞—É—Ç–∞ –≤ 400. –ï—Å–ª–∏ —ç—Ç–æ –º–µ–Ω—å—à–µ Constraints.minWidth,
        // –ª–µ–π–∞—É—Ç –±—É–¥–µ—Ç —Å–º–µ—â—ë–Ω –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–Ω–∏—Ü—ã.
        layout(width = 400, height = totalHeight) {
            placeables.forEach { placeable: Placeable ->
                placeable.placeRelative(0, posY)
                posY += placeable.height
            }
        }
    }
}

@Composable
private fun LayoutWithWidthParams(
    minWidth: Int,
    maxWidth: Int,
    constraintsMinWidth: Int,
    constraintsMaxWidth: Int,
    layoutWidth: Int,
    content: @Composable () -> Unit
) {

    val density = LocalDensity.current
    val minWidthDp = density.run { minWidth.toDp() }
    val maxWidthDp = density.run { maxWidth.toDp() }

    Layout(
        modifier = Modifier
            .widthIn(min = minWidthDp, max = maxWidthDp)
            .border(3.dp, Green400),
        content = content
    ) { measurables: List<Measurable>, constraints: Constraints ->

        val updatedConstraints = constraints.copy(
            minWidth = constraintsMinWidth,
            maxWidth = constraintsMaxWidth
        )

        val placeables = measurables.map { measurable: Measurable ->
            measurable.measure(updatedConstraints)
        }

        val totalHeight = placeables.sumOf { it.height }
        var posY = 0

        // üî• –ú–µ–Ω—è–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é —à–∏—Ä–∏–Ω—É —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –ª–µ–π–∞—É—Ç–∞
        // (–µ—Å–ª–∏ –æ–Ω–∞ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ —Ä–∞–º–∫–∏, Composable –±—É–¥–µ—Ç —Å–º–µ—â—ë–Ω)
        layout(width = layoutWidth, height = totalHeight) {
            placeables.forEach { placeable: Placeable ->
                placeable.placeRelative(0, posY)
                posY += placeable.height
            }
        }
    }
}
