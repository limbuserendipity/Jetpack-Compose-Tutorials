package com.smarttoolfactory.tutorial1_1basics.chapter3_layout

import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.Button
import androidx.compose.material.Text
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.composed
import androidx.compose.ui.draw.drawBehind
import androidx.compose.ui.draw.drawWithContent
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.geometry.Size
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.nativeCanvas
import androidx.compose.ui.layout.*
import androidx.compose.ui.platform.LocalDensity
import androidx.compose.ui.platform.debugInspectorInfo
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.*
import com.smarttoolfactory.tutorial1_1basics.ui.components.StyleableTutorialText
import com.smarttoolfactory.tutorial1_1basics.ui.components.TutorialHeader
import com.smarttoolfactory.tutorial1_1basics.ui.components.TutorialText2
import kotlin.random.Random

@Preview(showBackground = true)
@Composable
fun Tutorial3_1Screen1() {
    TutorialContent()
}

@Composable
private fun TutorialContent() {

    Column(
        modifier = Modifier
            .fillMaxSize()
            .verticalScroll(rememberScrollState())
    ) {
        TutorialHeader(text = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π Modifier")
        StyleableTutorialText(
            text = "1-) –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π modifier, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è " +
                    "layout —É Modifier, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Modifier. " +
                    "–° –µ—ë –ø–æ–º–æ—â—å—é –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑–º–µ—Ä—è–µ–º—ã–π (measurable), –∏–∑–º–µ—Ä–∏—Ç—å " +
                    "–µ–≥–æ (–ø–æ–ª—É—á–∏—Ç—å placeable), –∞ –∑–∞—Ç–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —à–∏—Ä–∏–Ω—É, –≤—ã—Å–æ—Ç—É " +
                    "–∏ –≤—ã–∑–≤–∞—Ç—å –æ–±–æ–±—â—ë–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é layout, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç **MeasureResult**."
        )

        TutorialText2(text = "customAlign Modifier")

        val modifier = Modifier
            .padding(8.dp)
            .fillMaxWidth()
            .background(Color.LightGray)

        Column(modifier.wrapContentHeight()) {
            Text(
                text = "Align Start with space",
                modifier = Modifier
                    .background(Color(0xFF8BC34A))
                    .customAlign(align = HorizontalAlign.START)
            )

            Text(
                text = "Align Center with space",
                modifier = Modifier
                    .background(Color(0xFF8BC34A))
                    .customAlign(align = HorizontalAlign.CENTER)
            )

            Text(
                text = "Align End with space",
                modifier = Modifier
                    .background(Color(0xFF8BC34A))
                    .customAlign(align = HorizontalAlign.END)
            )
        }

        TutorialText2(text = "firstBaselineToTop Modifier")
        Row(modifier.wrapContentHeight()) {
            Text(
                text = "Padding 32dp",
                modifier = Modifier
                    .background(Color(0xFF8BC34A))
                    .padding(top = 32.dp)
            )

            Text(
                text = "Baseline 32dp",
                modifier = Modifier
                    .background(Color(0xFF8BC34A))
                    .firstBaselineToTop(32.dp)
            )
        }

        StyleableTutorialText(
            text = "2-) **LayoutModifier** –∏ –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏—è **MeasureScope.measure** " +
                    "–º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è (measurable), " +
                    "–ø–æ–ª—É—á–µ–Ω–∏—è placeable –∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –µ–≥–æ (place) —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –æ—Ç—Å—Ç—É–ø–∞ (padding)."
        )
        TutorialText2(text = "Custom Padding Modifier")
        Text(
            text = "Custom Padding",
            modifier = Modifier
                .background(Color(0xFF8BC34A))
                .paddingNoOffsetNoConstrain(all = 4.dp)
        )

        StyleableTutorialText(
            text = "3-) **Modifier.composed** –ø–æ–∑–≤–æ–ª—è–µ—Ç modifier –∏–º–µ—Ç—å " +
                    "remember –∏–ª–∏ SideEffects, —á—Ç–æ–±—ã —Ö—Ä–∞–Ω–∏—Ç—å –≤ –ø–∞–º—è—Ç–∏ –∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ " +
                    "–¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –æ–Ω –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è."
        )

        // üî• composedBackground –∏—Å–ø–æ–ª—å–∑—É–µ—Ç remember, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç —Ü–≤–µ—Ç–∞,
        // –∏—Å–ø–æ–ª—å–∑—É—è key –≤–º–µ—Å—Ç–µ —Å remember

        Column(
            modifier = Modifier
                .padding(horizontal = 8.dp)
                .fillMaxWidth()
        ) {
            var counter by remember { mutableIntStateOf(0) }

            Button(
                onClick = { counter++ },
                modifier = Modifier.fillMaxWidth()
            ) {
                Text(text = "–£–≤–µ–ª–∏—á–∏—Ç—å $counter")
            }

            TutorialText2(text = "Modifier.composed")
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceEvenly
            ) {

                Box(
                    modifier = Modifier
                        .composedBackground(150.dp, 20.dp, 0)
                        .width(150.dp)
                ) {
                    Text(text = "–ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–æ $counter")
                }

                Box(
                    modifier = Modifier
                        .composedBackground(150.dp, 20.dp, 1)
                        .width(150.dp)
                ) {
                    Text(text = "–ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–æ $counter")
                }
            }

            TutorialText2(text = "Modifier –±–µ–∑ composed")
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceEvenly
            ) {

                Box(
                    modifier = Modifier
                        .nonComposedBackground(150.dp, 20.dp)
                        .width(150.dp)
                ) {
                    Text(text = "–ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–æ $counter")
                }

                Box(
                    modifier = Modifier
                        .nonComposedBackground(150.dp, 20.dp)
                        .width(150.dp)
                ) {
                    Text(text = "–ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–æ $counter")
                }
            }
        }
    }
}

/**
 * –§–∏–∫—Ç–∏–≤–Ω—ã–π modifier, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–±–∞–≤–ª—è–µ—Ç –æ—Ç—Å—Ç—É–ø—ã –ø–æ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã [Measurable] –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ dp
 * –∏ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç [Measurable] –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–º—É –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—é
 */
fun Modifier.customAlign(
    space: Int = 60,
    align: HorizontalAlign = HorizontalAlign.CENTER
) = this.then(
    layout { measurable: Measurable, constraints: Constraints ->

        val placeable = measurable.measure(constraints)
        val width = placeable.measuredWidth + 2 * space

        layout(width, placeable.measuredHeight) {
            when (align) {
                HorizontalAlign.START -> {
                    placeable.placeRelative(0, 0)
                }

                HorizontalAlign.CENTER -> {
                    placeable.placeRelative(space, 0)
                }

                HorizontalAlign.END -> {
                    placeable.placeRelative(2 * space, 0)
                }
            }
        }
    }
)

enum class HorizontalAlign {
    START, CENTER, END
}

/**
 * –î–æ–ø—É—Å—Ç–∏–º, –Ω—É–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å Text –Ω–∞ —ç–∫—Ä–∞–Ω–µ –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ–º –æ—Ç –≤–µ—Ä—Ö–∞ –¥–æ
 * –±–∞–∑–æ–≤–æ–π –ª–∏–Ω–∏–∏ (baseline) –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏. –ß—Ç–æ–±—ã —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å, –Ω—É–∂–Ω–æ –≤—Ä—É—á–Ω—É—é —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å
 * composable —Å –ø–æ–º–æ—â—å—é layout –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞.
 */
fun Modifier.firstBaselineToTop(
    firstBaselineToTop: Dp
) = this.then(
    layout { measurable, constraints ->

        val placeable = measurable.measure(constraints)

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ composable –∏–º–µ–µ—Ç –ø–µ—Ä–≤—É—é –±–∞–∑–æ–≤—É—é –ª–∏–Ω–∏—é
        check(placeable[FirstBaseline] != AlignmentLine.Unspecified)
        val firstBaseline = placeable[FirstBaseline]

        // –í—ã—Å–æ—Ç–∞ composable —Å —É—á—ë—Ç–æ–º –æ—Ç—Å—Ç—É–ø–∞ - –ø–µ—Ä–≤–∞—è –±–∞–∑–æ–≤–∞—è –ª–∏–Ω–∏—è
        val placeableY = firstBaselineToTop.roundToPx() - firstBaseline
        val height = placeable.height + placeableY
        layout(placeable.width, height) {
            // –†–∞–∑–º–µ—â–µ–Ω–∏–µ composable
            placeable.placeRelative(0, placeableY)
        }
    }
)

// –°–æ–∑–¥–∞—ë—Ç stateful modifier —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
fun Modifier.composedBackground(width: Dp, height: Dp, index: Int) = composed(
    // –ü–µ—Ä–µ–¥–∞—ë–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    inspectorInfo = debugInspectorInfo {
        name = "myModifier"
        properties["width"] = width
        properties["height"] = height
        properties["index"] = index
    },
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞, –≤—ã—á–∏—Å–ª—è–µ–º–∞—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    factory = {
        val density = LocalDensity.current

        val color: Color = remember(index) {
            Color(
                red = Random.nextInt(256),
                green = Random.nextInt(256),
                blue = Random.nextInt(256),
                alpha = 255
            )
        }

        // üî• –ë–µ–∑ remember —ç—Ç–æ—Ç —Ü–≤–µ—Ç –±—É–¥–µ—Ç –∑–∞–Ω–æ–≤–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–π —Ä–∞–∑, –∫–æ–≥–¥–∞ —ç–ª–µ–º–µ–Ω—Ç —Å —ç—Ç–∏–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è
//        val color: Color = Color(
//            red = Random.nextInt(256),
//            green = Random.nextInt(256),
//            blue = Random.nextInt(256),
//            alpha = 255
//        )

        Modifier.drawBehind {
            val widthInPx = with(density) { width.toPx() }
            val heightInPx = with(density) { height.toPx() }

            drawRect(color = color, topLeft = Offset.Zero, size = Size(widthInPx, heightInPx))
        }
    }
)

fun Modifier.nonComposedBackground(width: Dp, height: Dp) = this.then(
    Modifier.drawBehind {
        // üî• –ë–µ–∑ remember —ç—Ç–æ—Ç —Ü–≤–µ—Ç –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ –∫–∞–∂–¥—ã–π —Ä–∞–∑, –∫–æ–≥–¥–∞ —ç–ª–µ–º–µ–Ω—Ç —Å —ç—Ç–∏–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë—Ç—Å—è
        val color: Color = Color(
            red = Random.nextInt(256),
            green = Random.nextInt(256),
            blue = Random.nextInt(256),
            alpha = 255
        )

        val widthInPx = width.toPx()
        val heightInPx = height.toPx()

        drawRect(color = color, topLeft = Offset.Zero, size = Size(widthInPx, heightInPx))
    }
)

/**
 * Modifier –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Å–º–µ—à–∏–≤–∞–Ω–∏—è (Porter-Duff mode)
 */
fun Modifier.drawOffscreen(): Modifier = this.drawWithContent {
    with(drawContext.canvas.nativeCanvas) {
        val checkPoint = saveLayer(null, null)
        drawContent()
        restoreToCount(checkPoint)
    }
}
