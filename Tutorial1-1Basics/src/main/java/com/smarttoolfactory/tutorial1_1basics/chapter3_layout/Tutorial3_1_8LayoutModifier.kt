package com.smarttoolfactory.tutorial1_1basics.chapter3_layout

import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.BoxWithConstraints
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.widthIn
import androidx.compose.foundation.layout.wrapContentSize
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.MaterialTheme
import androidx.compose.material.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.shadow
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.Measurable
import androidx.compose.ui.layout.layout
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.Constraints
import androidx.compose.ui.unit.dp
import com.smarttoolfactory.tutorial1_1basics.ui.Blue400
import com.smarttoolfactory.tutorial1_1basics.ui.BlueGrey400
import com.smarttoolfactory.tutorial1_1basics.ui.Green400
import com.smarttoolfactory.tutorial1_1basics.ui.Orange400
import com.smarttoolfactory.tutorial1_1basics.ui.Pink400
import com.smarttoolfactory.tutorial1_1basics.ui.Purple400
import com.smarttoolfactory.tutorial1_1basics.ui.Red400
import com.smarttoolfactory.tutorial1_1basics.ui.components.StyleableTutorialText
import com.smarttoolfactory.tutorial1_1basics.ui.components.TutorialHeader
@Preview(showBackground = true)
@Composable
fun Tutorial3_1Screen8() {
    TutorialContent()
}

@Composable
private fun TutorialContent() {
    Column(
        Modifier
            .verticalScroll(rememberScrollState())
            .fillMaxSize()
            .padding(10.dp)
    ) {

        TutorialHeader(text = "layout Modifier")

        StyleableTutorialText(
            text = "**Modifier.layout{}** —Å–æ–∑–¥–∞—ë—Ç LayoutModifier, –ø–æ–∑–≤–æ–ª—è—é—â–∏–π " +
                    "–∏–∑–º–µ–Ω—è—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ—Ä–µ–Ω–∏—è (measure) –∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (layout) –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞.",
            bullets = false
        )
        // –í —ç—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ –º—ã –∏–∑–º–µ—Ä—è–µ–º placeable —Å –¥—Ä—É–≥–∏–º Modifier –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞,
        // —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–≤–µ–¥–µ–Ω–∏–µ Modifier.wrapContent
        LayoutModifierSample()

        StyleableTutorialText(
            text = "–° –ø–æ–º–æ—â—å—é **Modifier.layout{}** –º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –±–æ–ª—å—à–µ, —á–µ–º —É —Ä–æ–¥–∏—Ç–µ–ª—è. " +
                    "–ö—Ä–∞—Å–Ω—ã–π —Ñ–æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç—Ä–∏ Box, —É –≤—Ç–æ—Ä–æ–≥–æ Box —Ä–∞–∑–º–µ—Ä —É–≤–µ–ª–∏—á–µ–Ω " +
                    "–Ω–∞ 40.dp, –∞ –µ–≥–æ –ø–æ–∑–∏—Ü–∏—è —Å–º–µ—â–µ–Ω–∞ –≤–ª–µ–≤–æ –Ω–∞ 20.dp",
            bullets = false
        )
        LayoutModifierSample2()

        StyleableTutorialText(
            text = "–ü–æ—Ä—è–¥–æ–∫ layout –∏–¥—ë—Ç —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö, –Ω–æ Constraints –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑ " +
                    "–∏ –ª–∏–±–æ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è, –ª–∏–±–æ –ø—Ä–∏–≤–æ–¥—è—Ç—Å—è –∫ min –∏–ª–∏ max —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö Constraints " +
                    "–ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∑–∞ –∏—Ö –≥—Ä–∞–Ω–∏—Ü—ã.",
            bullets = false
        )
        LayoutModifierOrderSample()
    }
}

@Preview(showBackground = true)
@Composable
private fun LayoutModifierSample() {

    Row(
        modifier = Modifier.fillMaxWidth(),
        horizontalArrangement = Arrangement.SpaceEvenly
    ) {
        // Modifier.wrapContentSize
        Column(Modifier) {

            Text(
                text = "Modifier.wrapContentSize",
                style = MaterialTheme.typography.body2,
                color = Color.Gray,
                modifier = Modifier
                    .padding(start = 8.dp, end = 8.dp, top = 8.dp, bottom = 8.dp)
            )
            Box(
                modifier = Modifier
                    .shadow(4.dp, shape = RoundedCornerShape(8.dp))
                    .background(Pink400)
                    .size(140.dp)
                    .wrapContentSize()
                    .size(100.dp)
            ) {
                BoxWithConstraints(
                    modifier = Modifier
                        .shadow(4.dp, shape = RoundedCornerShape(8.dp))
                        .background(Blue400)
                ) {
                    Text(
                        text = "minWidth: $minWidth, maxWidth: $maxWidth",
                        modifier = Modifier.fillMaxSize()
                    )
                }
            }
        }

        // Modifier.layout
        Column {
            Text(
                text = "Modifier.layout",
                style = MaterialTheme.typography.body2,
                color = Color.Gray,
                modifier = Modifier
                    .padding(start = 8.dp, end = 8.dp, top = 8.dp, bottom = 8.dp)
            )
            Box(
                modifier = Modifier
                    .shadow(4.dp, shape = RoundedCornerShape(8.dp))
                    .background(Pink400)
                    .size(140.dp)
                    .layout { measurable, constraints ->
                        // –ó–¥–µ—Å—å –Ω–∞—à –∫–æ–Ω—Ç–µ–Ω—Ç: @Composable BoxScope.() -> Unit
                        // (BoxWithConstraints –≤ —ç—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ)
                        val placeable = measurable.measure(
                            constraints.copy(minWidth = 0, minHeight = 0)
                        )

                        layout(constraints.maxWidth, constraints.maxHeight) {
                            val xPos = (constraints.maxWidth - placeable.width) / 2
                            val yPos = (constraints.maxHeight - placeable.height) / 2

                            // –†–∞–∑–º–µ—â–∞–µ–º –ø–æ —Ü–µ–Ω—Ç—Ä—É —ç—Ç–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ Composable (Box)
                            placeable.placeRelative(xPos, yPos)
                        }
                    }
                    .size(100.dp)
            ) {
                BoxWithConstraints(
                    modifier = Modifier
                        .shadow(4.dp, shape = RoundedCornerShape(8.dp))
                        .background(Blue400),
                ) {
                    Text(
                        text = "minWidth: $minWidth, maxWidth: $maxWidth",
                        modifier = Modifier.fillMaxSize()
                    )
                }
            }
        }
    }
}

@Preview(showBackground = true)
@Composable
private fun LayoutModifierSample2() {
    Column(
        modifier = Modifier
            .fillMaxWidth()
            .padding(20.dp)
            .shadow(4.dp, shape = RoundedCornerShape(8.dp), clip = false)
            .background(Red400)
    ) {
        Spacer(modifier = Modifier.height(20.dp))

        Box(
            modifier = Modifier
                .fillMaxWidth()
                .height(20.dp)
                .shadow(4.dp, shape = RoundedCornerShape(8.dp))
                .background(BlueGrey400)
        )

        Spacer(modifier = Modifier.height(20.dp))

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ 40.dp
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .height(20.dp)
                .border(2.dp, Color.Yellow)
                .layout { measurable: Measurable, constraints: Constraints ->
                    val placeable = measurable.measure(
                        constraints.copy(
                            minWidth = constraints.maxWidth + 40.dp.roundToPx(),
                            maxWidth = constraints.maxWidth + 40.dp.roundToPx()
                        )
                    )

                    val layoutWidth =
                        placeable.width.coerceIn(constraints.maxWidth, constraints.maxWidth)
                    val layoutHeight =
                        placeable.height.coerceIn(constraints.minHeight, constraints.maxHeight)

                    layout(layoutWidth, layoutHeight) {
                        val xPos = (layoutWidth - placeable.width) / 2
                        placeable.placeRelative(xPos, 0)
                    }
                }
                .shadow(4.dp, shape = RoundedCornerShape(8.dp))
                .background(Green400)
        )
        Spacer(modifier = Modifier.height(20.dp))
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .height(20.dp)
                .shadow(4.dp, shape = RoundedCornerShape(8.dp))
                .background(BlueGrey400)
        )
        Spacer(modifier = Modifier.height(20.dp))
    }
}

@Preview(showBackground = true)
@Composable
private fun LayoutModifierOrderSample() {
    // –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –ø–æ–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å, –∫–∞–∫ —ç—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
    // –∏–ª–∏ Constraints –ø–æ—Å–ª–µ Modifier.layout

    /*
        –í—ã–≤–æ–¥ –≤ –ª–æ–≥:
        I  üçé Bottom Measurement phase  minWidth: 180.0.dp, maxWidth: 180.0.dp, placeable width: 180.0.dp
        I  üçè Middle Measurement phase minWidth: 100.0.dp, maxWidth: 300.0.dp, placeable width: 180.0.dp
        I  üåªTop Measurement phase minWidth: 0.0.dp, maxWidth: 392.72726.dp, placeable width: 300.0.dp
        I  üåªüåª Top Placement Phase
        I  üçèüçè Middle Placement Phase
        I  üçéüçé Bottom Placement Phase
     */
    BoxWithConstraints(
        modifier = Modifier
            .height(300.dp)
            .shadow(4.dp, shape = RoundedCornerShape(8.dp), clip = false)
            .background(Red400)
            // Constraints –¥–ª—è —ç—Ç–æ–≥–æ layout –ø—Ä–∏—Ö–æ–¥—è—Ç –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è (—à–∏—Ä–∏–Ω–∞ = 0..parentWidth, –≤—ã—Å–æ—Ç–∞ = 0..parentHeight)
            .layout { measurable, constraints ->

                val placeable = measurable.measure(constraints)
                println(
                    "üåªTop Measurement phase " +
                            "minWidth: ${constraints.minWidth.toDp()}, " +
                            "maxWidth: ${constraints.maxWidth.toDp()}, " +
                            "placeable width: ${placeable.width.toDp()}"
                )

                layout(constraints.maxWidth, constraints.maxHeight) {
                    println("üåªüåª Top Placement Phase")
                    placeable.placeRelative(50, 0)
                }
            }
            // üî• –≠—Ç–æ sizeIn-range –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –Ω–∏–∂–Ω–µ–º—É Modifier.layout
            .widthIn(min = 100.dp, max = 300.dp)
            .shadow(4.dp, shape = RoundedCornerShape(8.dp), clip = false)
            .background(Green400)
            .layout { measurable, constraints ->

                // üî• –ò–∑–º–µ—Ä—è–µ–º Measurable —Å —ç—Ç–∏–º–∏ Constraints
                // —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –∏—Ö —Å–ª–µ–¥—É—é—â–µ–º—É LayoutModifier
                val placeable = measurable.measure(
                    constraints
                        .copy(
                            minWidth = 180.dp.roundToPx(),
                            maxWidth = 250.dp.roundToPx(),
                            minHeight = 180.dp.roundToPx(),
                            maxHeight = 250.dp.roundToPx()
                        )
                )
                println(
                    "üçè Middle Measurement phase " +
                            "minWidth: ${constraints.minWidth.toDp()}, " +
                            "maxWidth: ${constraints.maxWidth.toDp()}, " +
                            "placeable width: ${placeable.width.toDp()}"
                )

                layout(constraints.maxWidth, constraints.maxHeight) {
                    println("üçèüçè Middle Placement Phase")
                    placeable.placeRelative(0, 50)
                }
            }

//             –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —ç—Ç–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã size, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å,
//             –∫–∞–∫ –º–µ–Ω—è—é—Ç—Å—è Constraints
//            .width(100.dp)
//            .size(240.dp)
            .shadow(4.dp, shape = RoundedCornerShape(8.dp), clip = false)
            .background(Orange400)
            .layout { measurable, constraints ->

                val placeable = measurable.measure(constraints)
                println(
                    "üçé Bottom Measurement phase  " +
                            "minWidth: ${constraints.minWidth.toDp()}, " +
                            "maxWidth: ${constraints.maxWidth.toDp()}, " +
                            "placeable width: ${placeable.width.toDp()}"
                )
                layout(placeable.width, placeable.height) {
                    println("üçéüçé Bottom Placement Phase")
                    placeable.placeRelative(150, 150)
                }
            }
            .shadow(4.dp, shape = RoundedCornerShape(8.dp), clip = false)
            .background(Purple400)
        // üî• –≠—Ç–æ—Ç Modifier.width(...) —Ç–æ–∂–µ –º–æ–∂–µ—Ç —Å—É–∑–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω Constraints,
//            .width(50.dp)
        ,
        contentAlignment = Alignment.Center
    ) {
        Text(
            text = "Min width: $minWidth\n" +
                    "maxWidth: $maxWidth",
            modifier = Modifier
                .border(2.dp, Color.Red)
                .padding(5.dp),
            color = Color.White
        )
    }
}
