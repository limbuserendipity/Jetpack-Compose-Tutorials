package com.smarttoolfactory.tutorial1_1basics.chapter3_layout

import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.IntrinsicSize
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.layout.wrapContentHeight
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.IntrinsicMeasurable
import androidx.compose.ui.layout.IntrinsicMeasureScope
import androidx.compose.ui.layout.Layout
import androidx.compose.ui.layout.Measurable
import androidx.compose.ui.layout.MeasurePolicy
import androidx.compose.ui.layout.MeasureResult
import androidx.compose.ui.layout.MeasureScope
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.Constraints
import androidx.compose.ui.unit.dp
import com.smarttoolfactory.tutorial1_1basics.ui.Blue400
import com.smarttoolfactory.tutorial1_1basics.ui.Brown400
import com.smarttoolfactory.tutorial1_1basics.ui.Green400
import com.smarttoolfactory.tutorial1_1basics.ui.Yellow400
import com.smarttoolfactory.tutorial1_1basics.ui.components.StyleableTutorialText
import com.smarttoolfactory.tutorial1_1basics.ui.components.TutorialHeader
import com.smarttoolfactory.tutorial1_1basics.ui.components.TutorialText2

@Preview(showBackground = true)
@Composable
fun Tutorial3_2Screen2() {
    TutorialContent()
}

@Composable
private fun TutorialContent() {

    Column(
        modifier = Modifier
            .fillMaxSize()
            .verticalScroll(rememberScrollState())
    ) {

        TutorialHeader(text = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ Layout'—ã 2")
        StyleableTutorialText(
            text = "1) –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ª–µ–π–∞—É—Ç—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π " +
                    "—Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å **MeasurePolicy**. –í —ç—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ –º—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º —Ç–∞–∫–æ–π –ø–æ–¥—Ö–æ–¥."
        )

        TutorialText2(text = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ª–µ–π–∞—É—Ç —Å fillMaxWidth")

        // –≠—Ç–æ—Ç –ª–µ–π–∞—É—Ç –∑–∞–Ω–∏–º–∞–µ—Ç –≤ –¥–≤–∞ —Ä–∞–∑–∞ –±–æ–ª—å—à–µ –º–µ—Å—Ç–∞, —á–µ–º —Å—É–º–º–∞—Ä–Ω—ã–µ –≥–∞–±–∞—Ä–∏—Ç—ã
        // –µ–≥–æ –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –∏ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –∏—Ö –ø–æ –Ω–∏–∂–Ω–µ–º—É –ø—Ä–∞–≤–æ–º—É —É–≥–ª—É.
        CustomLayout(
            modifier = Modifier
                .padding(8.dp)
                .fillMaxWidth()
                .wrapContentHeight()
                .background(Color.DarkGray)
        ) {
            Column(modifier = Modifier.background(Color.LightGray)) {
                Text(
                    "–ü–µ—Ä–≤—ã–π —Ç–µ–∫—Å—Ç",
                    modifier = Modifier
                        .background(Color(0xffF44336)),
                    color = Color.White
                )
                Text(
                    "–í—Ç–æ—Ä–æ–π —Ç–µ–∫—Å—Ç",
                    modifier = Modifier
                        .background(Color(0xff9C27B0)),
                    color = Color.White
                )
                Text(
                    "–¢—Ä–µ—Ç–∏–π —Ç–µ–∫—Å—Ç",
                    modifier = Modifier
                        .background(Color(0xff2196F3)),
                    color = Color.White
                )
            }
        }

        TutorialText2(text = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ª–µ–π–∞—É—Ç –±–µ–∑ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —à–∏—Ä–∏–Ω—ã")
        CustomLayout(
            modifier = Modifier
                .padding(8.dp)
                .wrapContentHeight()
                .background(Color.DarkGray)
        ) {
            Column(modifier = Modifier.background(Color.LightGray)) {
                Text(
                    "–ü–µ—Ä–≤—ã–π —Ç–µ–∫—Å—Ç",
                    modifier = Modifier
                        .background(Color(0xffF44336)),
                    color = Color.White
                )
                Text(
                    "–í—Ç–æ—Ä–æ–π —Ç–µ–∫—Å—Ç",
                    modifier = Modifier
                        .background(Color(0xff9C27B0)),
                    color = Color.White
                )
                Text(
                    "–¢—Ä–µ—Ç–∏–π —Ç–µ–∫—Å—Ç",
                    modifier = Modifier
                        .background(Color(0xff2196F3)),
                    color = Color.White
                )
            }
        }

        StyleableTutorialText(
            text = "2) –í–ª–æ–∂–µ–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã (intrinsic dimensions) –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, —á—Ç–æ–±—ã " +
                    "—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–∞–±–∞—Ä–∏—Ç—ã –Ω–∞–ø–æ–¥–æ–±–∏–µ placeholder'–æ–≤. –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ " +
                    "–æ–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –î–∞–∂–µ " +
                    "–µ—Å–ª–∏ —ç—Ç–æ Column, –≤—ã–ª–æ–∂–µ–Ω–Ω—ã–π –ø–æ —Å—É–º–º–µ –≤—ã—Å–æ—Ç –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤, " +
                    "—É—Å—Ç–∞–Ω–æ–≤–∫–∞ (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏) —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ min/max intrinsic " +
                    "height –ø—Ä–∏–≤–µ–¥—ë—Ç –∫ —Ç–æ–º—É, —á—Ç–æ —Å–≤–æ–±–æ–¥–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –±—É–¥–µ—Ç –ø–æ–¥–≥–æ–Ω—è—Ç—å—Å—è " +
                    "–ø–æ–¥ —ç—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è, –∞ –Ω–µ –ø–æ–¥ —Ä–µ–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É."
        )
        Column(
            modifier = Modifier.fillMaxWidth()
        ) {

            TutorialText2(text = "–ë–µ–∑ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –≤—ã—Å–æ—Ç—ã")
            CustomColumnWithIntrinsicDimensions(
                modifier = Modifier
                    .width(100.dp)
                    .background(Green400)
                    .padding(4.dp)
            ) {
                Text(
                    "–ü–µ—Ä–≤—ã–π —Ç–µ–∫—Å—Ç",
                    modifier = Modifier
                        .background(Color(0xffF44336)),
                    color = Color.White
                )
                Text(
                    "–í—Ç–æ—Ä–æ–π —Ç–µ–∫—Å—Ç",
                    modifier = Modifier
                        .background(Color(0xff9C27B0)),
                    color = Color.White
                )
            }

            TutorialText2(text = "height(IntrinsicSize.Min)")
            CustomColumnWithIntrinsicDimensions(
                modifier = Modifier
                    .width(100.dp)
                    .height(IntrinsicSize.Min)
                    .background(Yellow400)
                    .padding(4.dp)
            ) {
                Text(
                    "–ü–µ—Ä–≤—ã–π —Ç–µ–∫—Å—Ç",
                    modifier = Modifier
                        .background(Color(0xffF44336)),
                    color = Color.White
                )
                Text(
                    "–í—Ç–æ—Ä–æ–π —Ç–µ–∫—Å—Ç",
                    modifier = Modifier
                        .background(Color(0xff9C27B0)),
                    color = Color.White
                )
            }

            TutorialText2(text = "height(IntrinsicSize.Max)")
            CustomColumnWithIntrinsicDimensions(
                modifier = Modifier
                    .width(100.dp)
                    .height(IntrinsicSize.Max)
                    .background(Blue400)
                    .padding(4.dp)
            ) {
                Text(
                    "–ü–µ—Ä–≤—ã–π —Ç–µ–∫—Å—Ç",
                    modifier = Modifier
                        .background(Color(0xffF44336)),
                    color = Color.White
                )
                Text(
                    "–í—Ç–æ—Ä–æ–π —Ç–µ–∫—Å—Ç",
                    modifier = Modifier
                        .background(Color(0xff9C27B0)),
                    color = Color.White
                )
            }

            TutorialText2(text = "height(IntrinsicSize.Min) —É –±—Ä–∞—Ç—å–µ–≤ (siblings)")

            // üî•üî• –í—ã—Å–æ—Ç–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –Ω–∞–∏–±–æ–ª—å—à–∏–º IntrinsicSize.Min, –∫–æ—Ç–æ—Ä—ã–π –≤–µ—Ä–Ω—É–ª–∏ Layout'—ã
            Row(
                modifier = Modifier
                    .height(IntrinsicSize.Min)
                    .border(1.dp, Color.Red)
            ) {

                CustomColumnWithIntrinsicDimensions(
                    modifier = Modifier
                        // –≠—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ –≤—ã—Å–æ—Ç—É —ç—Ç–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
                        // –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –≤—ã—Å–æ—Ç–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º —Å –¥—Ä—É–≥–∏–º–∏,
                        // —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–∏–±–æ–ª—å—à–∏–π IntrinsicSize
                        .height(IntrinsicSize.Min)
                        .width(100.dp)
                        .background(Blue400)
                        .padding(4.dp)
                ) {
                    Text(
                        "–ü–µ—Ä–≤—ã–π —Ç–µ–∫—Å—Ç",
                        modifier = Modifier
                            .background(Color(0xffF44336)),
                        color = Color.White
                    )
                }

                Spacer(modifier = Modifier.width(20.dp))

                CustomColumnWithIntrinsicDimensions2(
                    modifier = Modifier
                        // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ
                        .height(IntrinsicSize.Min)
                        .width(100.dp)
                        .background(Yellow400)
                        .padding(4.dp)
                ) {
                    Text(
                        "–ü–µ—Ä–≤—ã–π —Ç–µ–∫—Å—Ç",
                        modifier = Modifier
                            .background(Color(0xffF44336)),
                        color = Color.White
                    )
                }
            }

            // üî•üî• –í—ã—Å–æ—Ç–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –Ω–∞–∏–±–æ–ª—å—à–∏–º IntrinsicSize.Max, –∫–æ—Ç–æ—Ä—ã–π –≤–µ—Ä–Ω—É–ª–∏ Layout'—ã
            TutorialText2(text = "height(IntrinsicSize.Max) —É –±—Ä–∞—Ç—å–µ–≤ (siblings)")
            Row(
                modifier = Modifier
                    .border(1.dp, Color.Red)
                    .height(IntrinsicSize.Max)
            ) {

                CustomColumnWithIntrinsicDimensions(
                    modifier = Modifier
                        // –≠—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ –≤—ã—Å–æ—Ç—É —ç—Ç–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
                        .height(IntrinsicSize.Max)
                        .width(100.dp)
                        .background(Blue400)
                        .padding(4.dp)
                ) {
                    Text(
                        "–ü–µ—Ä–≤—ã–π —Ç–µ–∫—Å—Ç",
                        modifier = Modifier
                            .border(2.dp, Green400)
                            .background(Color(0xffF44336)),
                        color = Color.White
                    )
                }

                Spacer(modifier = Modifier.width(20.dp))

                CustomColumnWithIntrinsicDimensions2(
                    modifier = Modifier
                        // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ
                        .height(IntrinsicSize.Max)
                        .width(100.dp)
                        .background(Yellow400)
                        .padding(4.dp)
                ) {
                    Text(
                        "–ü–µ—Ä–≤—ã–π —Ç–µ–∫—Å—Ç",
                        modifier = Modifier
                            .border(2.dp, Brown400)
                            .background(Color(0xffF44336)),
                        color = Color.White
                    )
                }
            }
        }
    }
}

@Composable
private fun CustomLayout(
    modifier: Modifier = Modifier,
    content: @Composable () -> Unit
) {

    // –ü–æ—Å—Ç—Ä–æ–∏–º –ª–µ–π–∞—É—Ç, –∑–∞–Ω–∏–º–∞—é—â–∏–π –≤–¥–≤–æ–µ –±–æ–ª—å—à–µ –º–µ—Å—Ç–∞, —á–µ–º —Å—É–º–º–∞—Ä–Ω—ã–µ –≥–∞–±–∞—Ä–∏—Ç—ã –µ–≥–æ –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤,
    // –∏ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞—é—â–∏–π –∏—Ö –ø–æ –ø—Ä–∞–≤–æ–º—É –Ω–∏–∂–Ω–µ–º—É —É–≥–ª—É.
    val measurePolicy = MeasurePolicy { measurables, constraints ->

        println(
            "üî• CustomLayout Constraints\n" +
                    "minWidth: ${constraints.minWidth}, " +
                    "maxWidth: ${constraints.maxWidth}, " +
                    "boundedWidth: ${constraints.hasBoundedWidth}, " +
                    "fixedWidth: ${constraints.hasFixedWidth}\n" +
                    "minHeight: ${constraints.minHeight}, " +
                    "maxHeight: ${constraints.maxHeight}, " +
                    "hasBoundedHeight: ${constraints.hasBoundedHeight}, " +
                    "hasFixedHeight: ${constraints.hasFixedHeight}\n"
        )

        // measurables ‚Äî —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–∫–∞–∂–¥—ã–π –¥–æ—á–µ—Ä–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç) –¥–ª—è –Ω–∞—à–µ–≥–æ –ª–µ–π–∞—É—Ç–∞.
        val childConstraints = Constraints(
            minWidth = constraints.minWidth,
            minHeight = constraints.minHeight
        )
        // –ò–∑–º–µ—Ä—è–µ–º –¥–µ—Ç–µ–π —Å childConstraints
        val placeables = measurables.map { it.measure(childConstraints) }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ç–µ–∫—É—â–µ–≥–æ –ª–µ–π–∞—É—Ç–∞: –¥–≤–æ–π–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –∏ –≤—ã—Å–æ—Ç–∞
        // —Å–∞–º–æ–≥–æ —à–∏—Ä–æ–∫–æ–≥–æ –∏ —Å–∞–º–æ–≥–æ –≤—ã—Å–æ–∫–æ–≥–æ –¥–æ—á–µ—Ä–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        val layoutWidth = (placeables.maxByOrNull { it.width }?.width ?: 0) * 2
        val layoutHeight = (placeables.maxByOrNull { it.height }?.height ?: 0) * 2

        layout(layoutWidth, layoutHeight) {
            // –†–∞–∑–º–µ—â–∞–µ–º –¥–µ—Ç–µ–π –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É
            placeables.forEach {
                it.placeRelative(
                    x = layoutWidth - it.width,
                    y = layoutHeight - it.height
                )
            }
        }
    }

    Layout(modifier = modifier, content = content, measurePolicy = measurePolicy)
}

/**
 * CustomColumn –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —É—Ä–æ–∫–∞, –Ω–æ —Å Intrinsic Height,
 * –≥–¥–µ minIntrinsicHeight –∏ maxIntrinsicHeight –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç
 * –Ω–µ–∫–æ—Ç–æ—Ä—ã–π —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–º–µ—Ä (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏).
 */
@Composable
fun CustomColumnWithIntrinsicDimensions(
    modifier: Modifier = Modifier,
    content: @Composable () -> Unit
) {
    val measurePolicy = object : MeasurePolicy {

        override fun MeasureScope.measure(
            measurables: List<Measurable>,
            constraints: Constraints
        ): MeasureResult {

            val looseConstraints = constraints.copy(minHeight = 0)
            val placeables = measurables.map { measurable ->
                measurable.measure(looseConstraints)
            }

            var yPosition = 0

            val totalHeight: Int = placeables.sumOf {
                it.height
            }

            // üî• –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –≤–∑—è—Ç—å –º–∞–∫—Å–∏–º—É–º —à–∏—Ä–∏–Ω—ã Composable –∏–ª–∏ maxWidth Constraints
            val maxWidth: Int = placeables.maxOf {
                it.width
            }

            return layout(maxWidth, totalHeight) {
                placeables.forEach { placeable ->
                    placeable.placeRelative(x = 0, y = yPosition)
                    yPosition += placeable.height
                }
            }
        }

        override fun IntrinsicMeasureScope.minIntrinsicHeight(
            measurables: List<IntrinsicMeasurable>,
            width: Int
        ): Int {

            println("üçè minIntrinsicHeight() width: $width, measurables: ${measurables.size}")
            // üî• –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            return 200
        }

        override fun IntrinsicMeasureScope.maxIntrinsicHeight(
            measurables: List<IntrinsicMeasurable>,
            width: Int
        ): Int {

            println("üçé maxIntrinsicHeight() width: $width, measurables: ${measurables.size}")
            // üî• –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            return 400
        }
    }

    Layout(modifier = modifier, content = content, measurePolicy = measurePolicy)
}


/**
 * CustomColumn, –≥–¥–µ minIntrinsicHeight –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ–Ω—å—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ,
 * –∞ maxIntrinsicHeight ‚Äî –±–æ–ª—å—à–µ–µ.
 */
@Composable
fun CustomColumnWithIntrinsicDimensions2(
    modifier: Modifier = Modifier,
    content: @Composable () -> Unit
) {
    val measurePolicy = object : MeasurePolicy {

        override fun MeasureScope.measure(
            measurables: List<Measurable>,
            constraints: Constraints
        ): MeasureResult {

            val looseConstraints = constraints.copy(minHeight = 0)
            val placeables = measurables.map { measurable ->
                measurable.measure(looseConstraints)
            }

            var yPosition = 0

            val totalHeight: Int = placeables.sumOf {
                it.height
            }

            val maxWidth: Int = placeables.maxOf {
                it.width
            }

            return layout(maxWidth, totalHeight) {
                placeables.forEach { placeable ->
                    placeable.placeRelative(x = 0, y = yPosition)
                    yPosition += placeable.height
                }
            }
        }

        override fun IntrinsicMeasureScope.minIntrinsicHeight(
            measurables: List<IntrinsicMeasurable>,
            width: Int
        ): Int {

            println("üöô minIntrinsicHeight() width: $width, measurables: ${measurables.size}")
            // üî• –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–µ –¥–µ–ª–∞—Ç—å —Ç–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ)
            return 80
        }

        override fun IntrinsicMeasureScope.maxIntrinsicHeight(
            measurables: List<IntrinsicMeasurable>,
            width: Int
        ): Int {

            println("üöó maxIntrinsicHeight() width: $width, measurables: ${measurables.size}")
            // üî• –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–µ –¥–µ–ª–∞—Ç—å —Ç–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ)
            return 500
        }
    }

    Layout(modifier = modifier, content = content, measurePolicy = measurePolicy)
}
