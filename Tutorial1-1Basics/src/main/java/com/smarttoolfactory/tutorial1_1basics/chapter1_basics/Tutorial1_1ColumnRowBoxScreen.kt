package com.smarttoolfactory.tutorial1_1basics.chapter1_basics

import android.content.res.Configuration
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxHeight
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.wrapContentHeight
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.shadow
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.tooling.preview.Devices
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.smarttoolfactory.tutorial1_1basics.ui.components.StyleableTutorialText
import com.smarttoolfactory.tutorial1_1basics.ui.components.TutorialHeader
import com.smarttoolfactory.tutorial1_1basics.ui.components.TutorialText2


/**
 * –£—á–µ–±–Ω–∏–∫ –æ [Column], [Row], [Box] –∏ [Modifier].
 *
 * * [Column] —Ä–∞–∑–º–µ—â–∞–µ—Ç —Å–≤–æ–∏ –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.
 * * [Row] —Ä–∞–∑–º–µ—â–∞–µ—Ç —Å–≤–æ–∏ –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.
 * * [Box] –Ω–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç —Å–≤–æ–∏ –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥—Ä—É–≥ –Ω–∞ –¥—Ä—É–≥–∞.
 *
 * * [Modifier] –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–∞–¥–∞–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤, —Ç–∞–∫–∏—Ö –∫–∞–∫ —Ä–∞–∑–º–µ—Ä—ã, –æ—Ç—Å—Ç—É–ø—ã, —Ü–≤–µ—Ç —Ñ–æ–Ω–∞,
 * –¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏, ***padding*** –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ.
 *
 * ## –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ
 * –ü–æ—Ä—è–¥–æ–∫ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ. –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ—Ä—è–¥–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è **padding**
 * –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (Compose) –±—É–¥–µ—Ç –∏–º–µ—Ç—å –ª–∏–±–æ –æ—Ç—Å—Ç—É–ø, –ª–∏–±–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –æ—Ç—Å—Ç—É–ø (margin –∏–ª–∏ padding).
 */

@Preview(showBackground = true)
@Composable
fun Tutorial1_1Screen() {
    TutorialContent()
}

@Composable
private fun TutorialContent() {

    LazyColumn(Modifier.fillMaxSize()) {

        item {
            TutorialHeader(text = "Row")
            StyleableTutorialText(text = "1-) **Row** ‚Äî —ç—Ç–æ layout composable, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑–º–µ—â–∞–µ—Ç —Å–≤–æ–∏ –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.")
            RowExample()

            TutorialHeader(text = "Column")
            StyleableTutorialText(text = "2-) **Column** ‚Äî —ç—Ç–æ layout composable, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑–º–µ—â–∞–µ—Ç —Å–≤–æ–∏ –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.")
            ColumnExample()

            StyleableTutorialText(
                text = "3-) –ü–æ—Ä—è–¥–æ–∫ –æ—Ç—Å—Ç—É–ø–æ–≤ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ padding –∏–ª–∏ margin –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞. " +
                        "–í –ø—Ä–∏–≤–µ–¥—ë–Ω–Ω–æ–º –Ω–∏–∂–µ –ø—Ä–∏–º–µ—Ä–µ –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –æ—Ç—Å—Ç—É–ø—ã."
            )
            ColumnsAndRowPaddingsExample()

            StyleableTutorialText(text = "4-) –¢–µ–Ω—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –∫ Column –∏–ª–∏ Row.")
            ShadowExample()

            TutorialHeader(text = "Box")
            StyleableTutorialText(
                text = "5-) **Box** –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥—Ä—É–≥ –Ω–∞–¥ –¥—Ä—É–≥–æ–º. " +
                        "–≠–ª–µ–º–µ–Ω—Ç, –æ–±—ä—è–≤–ª–µ–Ω–Ω—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–º, —Ä–∞—Å–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è —Å–≤–µ—Ä—Ö—É."
            )
            BoxExample()

            StyleableTutorialText(
                text = "7-) Spacer –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ –∫—Ä–∞—è–º –∏–ª–∏ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞."
            )
            BoxShadowAndAlignmentExample()

            TutorialHeader(text = "Spacer")

            StyleableTutorialText(
                text = "7-) Spacer –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ –∫—Ä–∞—è–º –∏–ª–∏ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞."
            )
            WeightExample()

            TutorialHeader(text = "Weight and Spacer")
            StyleableTutorialText(
                text = "8-) **Weight** –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–µ–≥–æ –≤–µ—Å–∞, —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ " +
                        "–¥–æ–ª–∂–Ω–æ –∑–∞–Ω–∏–º–∞—Ç—å –∫–∞–∂–¥–æ–µ –¥–æ—á–µ—Ä–Ω–µ–µ –∑–≤–µ–Ω–æ. **Spacer** –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è " +
                        "–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö –∏–ª–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–º–µ–∂—É—Ç–∫–æ–≤ –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏."
            )
            WeightAndSpacerExample()
        }
    }
}

@Composable
fun RowExample() {

    TutorialText2(text = "Arrangement.Start")
    Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.Start) {
        RowTexts()
    }

    TutorialText2(text = "Arrangement.End")
    Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.End) {
        RowTexts()
    }

    TutorialText2(text = "Arrangement.Center")
    Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.Center) {
        RowTexts()
    }

    TutorialText2(text = "Arrangement.SpaceEvenly")
    Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceEvenly) {
        RowTexts()
    }

    TutorialText2(text = "Arrangement.SpaceAround")
    Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceAround) {
        RowTexts()
    }

    TutorialText2(text = "Arrangement.SpaceBetween")

    Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {
        RowTexts()
    }
}

@Composable
fun ColumnExample() {
    val modifier = Modifier
        .padding(8.dp)
        .fillMaxWidth()
        .height(200.dp)
        .background(Color.LightGray)

    TutorialText2(text = "Arrangement.Top")
    Column(modifier = modifier, verticalArrangement = Arrangement.Top) {
        ColumnTexts()
    }

    TutorialText2(text = "Arrangement.Bottom")
    Column(modifier = modifier, verticalArrangement = Arrangement.Bottom) {
        ColumnTexts()
    }

    TutorialText2(text = "Arrangement.Center")
    Column(modifier = modifier, verticalArrangement = Arrangement.Center) {
        ColumnTexts()
    }

    TutorialText2(text = "Arrangement.SpaceEvenly")
    Column(modifier = modifier, verticalArrangement = Arrangement.SpaceEvenly) {
        ColumnTexts()
    }

    TutorialText2(text = "Arrangement.SpaceAround")
    Column(modifier = modifier, verticalArrangement = Arrangement.SpaceAround) {
        ColumnTexts()
    }

    TutorialText2(text = "Arrangement.SpaceBetween")
    Column(modifier = modifier, verticalArrangement = Arrangement.SpaceBetween) {
        ColumnTexts()
    }
}


@Composable
fun RowTexts() {
    Text(
        text = "Row1", modifier = Modifier
            .background(Color(0xFFFF9800))
            .padding(4.dp)
    )
    Text(
        text = "Row2", modifier = Modifier
            .background(Color(0xFFFFA726))
            .padding(4.dp)
    )
    Text(
        text = "Row3", modifier = Modifier
            .background(Color(0xFFFFB74D))
            .padding(4.dp)
    )
}

@Composable
fun ColumnTexts() {
    Text(
        text = "Column1", modifier = Modifier
            .background(Color(0xFF8BC34A))
            .padding(4.dp)
    )
    Text(
        text = "Column2", modifier = Modifier
            .background(Color(0xFF9CCC65))
            .padding(4.dp)
    )
    Text(
        text = "Column3", modifier = Modifier
            .background(Color(0xFFAED581))
            .padding(4.dp)
    )
}


/**
 * [Column] and [Row] example with padding, background, and fill and wrap content
 * to determine dimensions of contents.
 */
@Composable
fun ColumnsAndRowPaddingsExample() {

    val rowModifier = Modifier
        .background(Color(0xFFF06292))
        .fillMaxWidth()
        .wrapContentHeight()

    // üî• –û—Ç—Å—Ç—É–ø –ø–æ—Å–ª–µ –∂—ë–ª—Ç–æ–≥–æ —Ñ–æ–Ω–∞ –æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    val modifierA = Modifier
        .background(Color(0xFFFFEB3B))
        .padding(15.dp)

// üî• –û—Ç—Å—Ç—É–ø (10dp) –ø–µ—Ä–µ–¥ –≥–æ–ª—É–±—ã–º —Ü–≤–µ—Ç–æ–º –¥–µ–π—Å—Ç–≤—É–µ—Ç –∫–∞–∫ margin, –∞ –∑–∞–≤–µ—Ä—à–∞—é—â–∏–π –æ—Ç—Å—Ç—É–ø –æ—Å—Ç–∞–≤–ª—è–µ—Ç
// –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ (padding) –¥–ª—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    val modifierB = Modifier
        .padding(10.dp)
        .background(Color(0xFF80DEEA))
        .padding(end = 15.dp)


    val modifierC = Modifier
        .background(Color(0xFF607D8B))
        .padding(15.dp)

    Row(modifier = rowModifier, horizontalArrangement = Arrangement.SpaceEvenly) {

        Column(
            modifier = modifierA
                .background(Color(0xFFFFFFFF))
                .padding(8.dp)
        ) {
            Text(text = "Text A1")
            Text(text = "Text A2")
            Text(text = "Text A3")
        }

        Column(
            modifier = modifierB
                .background(Color(0xFF9575CD))
                .padding(top = 12.dp, bottom = 22.dp)
        ) {
            Text(text = "Text B1")
            Text(text = "Text B2")
            Text(text = "Text B3")
        }

        Column(modifier = modifierC.background(Color(0xFFB2FF59))) {
            Text(text = "Text C1")
            Text(text = "Text C2")
            Text(text = "Text C3")
        }
    }
}

@Composable
fun ShadowExample() {

    Row(
        modifier = Modifier
            .padding(8.dp)
            .shadow(
                elevation = 4.dp,
                shape = RoundedCornerShape(8.dp)
            )
    ) {
        RowTexts()
    }

    Column(
        modifier = Modifier
            .padding(8.dp)
            .shadow(
                elevation = 4.dp,
                shape = RoundedCornerShape(8.dp)
            )
    ) {
        ColumnTexts()
    }
}

@Composable
fun BoxExample() {

    val modifier = Modifier
        .fillMaxWidth()
        .height(250.dp)
        .background(Color.LightGray)

    Box(
        modifier = modifier

    ) {

        // –≠—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –≤–Ω–∏–∑—É
        Text(
            text = "First",
            modifier = Modifier
                .background(Color(0xFF1976D2))
                .size(200.dp),
            color = Color.White,
        )

        // –≠—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ
        Text(
            text = "Second",
            modifier = Modifier
                .background(Color(0xFF2196F3))
                .size(150.dp),
            color = Color.White
        )

        // –≠—Ç–æ —ç–ª–µ–º–µ–Ω—Ç —Å–≤–µ—Ä—Ö—É
        Text(
            text = "Third ",
            modifier = Modifier
                .background(Color(0xFF64B5F6))
                .size(100.dp),
            color = Color.White
        )
    }
}

@Composable
fun BoxShadowAndAlignmentExample() {

    Box(
        modifier = Modifier
            .fillMaxWidth()
            .height(250.dp)
            .background(Color.LightGray)
            .padding(8.dp)
    ) {

        Box(
            modifier = Modifier
                .shadow(
                    elevation = 4.dp,
                    shape = RoundedCornerShape(8.dp)
                )
        ) {
            // –≠—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –≤–Ω–∏–∑—É
            Text(
                text = "First",
                modifier = Modifier
                    .background(Color(0xFFFFA000))
                    .size(200.dp),
                color = Color.White
            )
        }

        Box(
            modifier = Modifier
                .shadow(
                    elevation = 8.dp,
                    shape = RoundedCornerShape(8.dp)
                )
                .align(Alignment.TopEnd)

        ) {
            // –≠—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ
            Text(
                text = "Second",
                modifier = Modifier
                    .background(Color(0xFFFFC107))
                    .size(150.dp),
                color = Color.White
            )
        }


        val modifier = Modifier
            .shadow(
                elevation = 4.dp,
                shape = RoundedCornerShape(8.dp)
            )
            .align(Alignment.BottomStart)

        Box(
            modifier = modifier

        ) {
            // –≠—Ç–æ —ç–ª–µ–º–µ–Ω—Ç —Å–≤–µ—Ä—Ö—É
            Text(
                text = "Third ",
                modifier = Modifier
                    .background(Color(0xFFFFD54F))
                    .size(100.dp),
                color = Color.White
            )
        }
    }
}

@Composable
fun WeightExample() {
    Column(modifier = Modifier
        .fillMaxWidth()
        .background(Color.LightGray)) {
        Row {
            Text(
                text = "Row1", modifier = Modifier
                    .background(Color(0xFFFF9800))
                    .padding(4.dp)
            )

            // üî• –≠—Ç–æ—Ç Spacer –∑–∞–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –º–µ–∂–¥—É Row1 –∏ –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ Row2 –∏ Row3
            Spacer(modifier = Modifier.weight(1f))

            Text(
                text = "Row2", modifier = Modifier
                    .background(Color(0xFFFFA726))
                    .padding(4.dp)
            )
            Text(
                text = "Row3", modifier = Modifier
                    .background(Color(0xFFFFB74D))
                    .padding(4.dp)
            )
        }

        Column(modifier = Modifier.height(200.dp)) {
            Text(
                text = "Column1", modifier = Modifier
                    .background(Color(0xFF8BC34A))
                    .padding(4.dp)
            )

            Spacer(modifier = Modifier.weight(1f))
            Text(
                text = "Column2", modifier = Modifier
                    .background(Color(0xFF9CCC65))
                    .padding(4.dp)
            )
            Text(
                text = "Column3", modifier = Modifier
                    .background(Color(0xFFAED581))
                    .padding(4.dp)
            )
        }
    }
}

@Composable
fun WeightAndSpacerExample() {

    // –≠—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ
    val modifier = Modifier
        .fillMaxWidth()
        .height(60.dp)
        .background(Color.LightGray)

    val rowModifier = Modifier
        .fillMaxHeight()
        .background(Color(0xFFA1887F))
        .padding(4.dp)

    Row(modifier = modifier) {

        Text(
            fontSize = 12.sp,
            text = "Weight 2",
            modifier = rowModifier.weight(2f)
        )

        // –≠—Ç–æ—Ç Spacer —Å–æ–∑–¥–∞—ë—Ç –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ –≤ Row –∏–ª–∏ Column
        Spacer(modifier = modifier.weight(1f))

        Text(
            fontSize = 12.sp,
            text = "Weight 3",
            modifier = rowModifier.weight(3f)
        )

        Spacer(modifier = modifier.weight(1f))

        Text(
            fontSize = 12.sp,
            text = "Weight 4",
            modifier = rowModifier.weight(4f)
        )
    }

    // –≠—Ç–æ—Ç Spacer –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ Column –∏ –¥–µ–π—Å—Ç–≤—É–µ—Ç –∫–∞–∫ –æ—Ç—Å—Ç—É–ø –Ω–∏–∂–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    Spacer(modifier = Modifier.height(16.dp))
}

@Preview(showBackground = true)
@Preview("dark", uiMode = Configuration.UI_MODE_NIGHT_YES)
@Preview(device = Devices.PIXEL_C, showBackground = true)
@Composable
private fun Tutorial1_1Preview() {
    TutorialContent()
}